import os
import subprocess
from pathlib import Path
from typing import Optional
import time
import socket
import uvicorn

ENV_FILE=".env.dev"
# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parents[1]

COMPOSE_FILE_WITHOUT_BACKEND = "docker-compose.dev.yml"

DEFAULT_PORTS = {
    'FASTAPI': 8000,
    'RABBITMQ': 5672,      # –ü–æ—Ä—Ç –¥–ª—è AMQP
    'RABBITMQ_UI': 15672,  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    'POSTGRES': 5432,
    'REDIS': 6379,
    'PGADMIN': 5050,
    'REDIS_COMMANDER': 8081,
    'GRAFANA': 3334,
    'LOKI': 3100
}
def load_env_vars(env_file_path: str = None) -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞

    Args:
        env_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ENV_FILE –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    if env_file_path is None:
        env_file_path = os.path.join(ROOT_DIR, ENV_FILE)

    env_vars = {}
    if os.path.exists(env_file_path):
        with open(env_file_path, encoding="utf-8") as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    try:
                        key, value = line.strip().split('=', 1)
                        env_vars[key] = value
                    except ValueError:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                        pass
    return env_vars

def run_compose_command(command: str | list, compose_file: str = COMPOSE_FILE_WITHOUT_BACKEND, env: dict = None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç docker-compose –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    if isinstance(command, str):
        command = command.split()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    environment = os.environ.copy()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ ENV_FILE
    environment.update(load_env_vars())
    if env:
        environment.update(env)

    subprocess.run(
        ["docker-compose", "-f", compose_file] + command,
        cwd=ROOT_DIR,
        check=True,
        env=environment
    )

def find_free_port(start_port: int = 8000) -> int:
    """–ò—â–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
    port = start_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤! –ê—Ö—É–µ—Ç—å!")

def get_available_port(default_port: int) -> int:
    port = default_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ {default_port}")

def get_port(service: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    service_upper = service.upper().replace('_PORT', '')
    return int(os.getenv(service, DEFAULT_PORTS[service_upper]))

def check_service(name: str, port: int, retries: int = 5, delay: int = 2) -> bool:
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for _ in range(retries):
        try:
            sock.connect(('localhost', port))
            sock.close()
            return True
        except:
            print(f"‚è≥ –ñ–¥—ë–º {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            time.sleep(delay)
    return False

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services_config = {
        'Redis': ('REDIS_PORT', 5),
        # 'RabbitMQ': ('RABBITMQ_UI_PORT', 5),
        'PostgreSQL': ('POSTGRES_PORT', 30),
        # 'Grafana': ('GRAFANA_PORT', 5),
        # 'Loki': ('LOKI_PORT', 5)
    }

    for service_name, (port_key, retries) in services_config.items():
        port = get_port(port_key)
        if not check_service(service_name, port, retries):
            print(f"‚ùå {service_name} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}!")
            return False
    return True
    
def get_postgres_container_name() -> str:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è

    Returns:
        str: –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Docker
        which_result = subprocess.run(
            ["which", "docker"],
            capture_output=True,
            text=True
        )
        if which_result.returncode != 0:
            print("‚ÑπÔ∏è Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            return "postgres"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            
        result = subprocess.run(
            ["docker", "ps", "--filter", "name=postgres", "--format", "{{.Names}}"],
            capture_output=True,
            text=True,
            check=True
        )
        containers = [name for name in result.stdout.strip().split('\n') if name]
        if not containers:
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ Docker, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            return "postgres"
        return containers[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL —á–µ—Ä–µ–∑ Docker: {e}")
        return "postgres"
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "postgres"

def create_database():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    """
    print("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    db_config = load_env_vars()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    postgres_container = get_postgres_container_name()
    print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL: {postgres_container}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
    user = db_config.get('POSTGRES_USER', 'postgres')
    password = db_config.get('POSTGRES_PASSWORD', '')
    host = db_config.get('POSTGRES_HOST', 'localhost')
    port = db_config.get('POSTGRES_PORT', '5432')
    db_name = db_config.get('POSTGRES_DB', 'aichat_db')

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Docker
        which_docker = subprocess.run(["which", "docker"], capture_output=True)
        docker_available = which_docker.returncode == 0
        
        if docker_available:
            # –ú–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker
            check_db_inside = subprocess.run(
                ["docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
                f"SELECT 1 FROM pg_database WHERE datname = '{db_name}';"],
                capture_output=True, text=True
            )

            if "1 row" not in check_db_inside.stdout:
                print(f"üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —Å–æ–∑–¥–∞—ë–º...")
                create_cmd = [
                    "docker", "exec", "-i", postgres_container, "psql", "-U", user, "-c",
                    f"CREATE DATABASE {db_name};"
                ]
                subprocess.run(create_cmd, check=True)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞!")
        else:
            # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ psql
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
            psql_command = f"psql -U {user} -h {host} -p {port}"
            if password:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PGPASSWORD –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–æ–ª—è
                env = os.environ.copy()
                env["PGPASSWORD"] = password
            else:
                env = os.environ.copy()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
            check_db = subprocess.run(
                f"{psql_command} -c \"SELECT 1 FROM pg_database WHERE datname = '{db_name}';\"",
                shell=True, env=env, capture_output=True, text=True
            )
            
            if "1 row" not in check_db.stdout:
                print(f"üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º...")
                create_cmd = f"{psql_command} -c \"CREATE DATABASE {db_name};\""
                subprocess.run(create_cmd, shell=True, env=env, check=True)
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞!")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        dsn = f"postgresql://{user}:*******@{host}:{port}/{db_name}"
        print(f"üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {dsn} (–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç)")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def start_infrastructure():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    try:

        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        run_compose_command("down --remove-orphans")

        # –û—á–∏—â–∞–µ–º —Ç–æ–º–∞
        subprocess.run(["docker", "volume", "prune", "-f"], check=True)

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
        ports = {
            service: get_available_port(default_port)
            for service, default_port in DEFAULT_PORTS.items()
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã –≤ docker-compose —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env = {
            f"{service}_PORT": str(port)
            for service, port in ports.items()
        }

        run_compose_command(["up", "-d"], COMPOSE_FILE_WITHOUT_BACKEND, env=env)

        # print("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL...")
        # time.sleep(5)

        # –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        check_services()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è PostgreSQL
        print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        migrate()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")


        print("\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
        print(f"üìä FastAPI Swagger:    http://localhost:{ports['FASTAPI']}/docs")
        print(f"üê∞ RabbitMQ UI:       http://localhost:{ports['RABBITMQ_UI']}")
        print(f"üóÑÔ∏è PostgreSQL:        localhost:{ports['POSTGRES']}")
        print(f"üì¶ Redis:             localhost:{ports['REDIS']}")
        print(f"üîç PgAdmin:           http://localhost:{ports['PGADMIN']}")
        print(f"üìä Redis Commander:    http://localhost:{ports['REDIS_COMMANDER']}")
        print(f"üìä Grafana:           http://localhost:{ports['GRAFANA']}")
        print(f"üìà Loki:              http://localhost:{ports['LOKI']}\n")

        print("‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def dev(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not start_infrastructure():
        return

    if port is None:
        port = find_free_port()


    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="debug",
        access_log=False
    )

def serve(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç uvicorn —Å–µ—Ä–≤–µ—Ä

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    subprocess.run([
        "uvicorn",
        "app.main:app",
        "--host", "0.0.0.0",
        "--port", "8000",
        "--proxy-headers",
        "--forwarded-allow-ips=*"
    ], check=True)

def migrate():
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    # create_database()

    subprocess.run(["alembic", "upgrade", "head"], check=True)

def format():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)

def check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞.
    """
    mypy_success = True
    flake8_success = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ mypy
    try:
        mypy_result = subprocess.run(
            ["mypy", "app/"],
            capture_output=True,
            text=True,
            check=True
        )
        mypy_errors = mypy_result.stdout.split('\n')

        mypy_error_groups = {
            'error: Incompatible': '–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã',
            'error: Name': '–û—à–∏–±–∫–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è',
            'error: Missing': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã',
            'error: Argument': '–û—à–∏–±–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤',
            'error: Return': '–û—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π'
        }

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        grouped_errors = set()
        for pattern, desc in mypy_error_groups.items():
            matches = [e for e in mypy_errors if pattern in e]
            if matches:
                print(f"\nüîç MyPy - {desc}:")
                for error in matches:
                    print(f"- {error}")
                    grouped_errors.add(error)

        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ "–ü—Ä–æ—á–∏–µ"
        other_errors = [e for e in mypy_errors if e and e not in grouped_errors]
        if other_errors:
            print("\nüîç MyPy - –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏:")
            for error in other_errors:
                print(f"- {error}")
    except subprocess.CalledProcessError as e:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ mypy:")
        print(e.stdout)
        mypy_success = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ flake8
    try:
        result = subprocess.run(
            ["flake8", "app/"],
            capture_output=True,
            text=True,
            check=True
        )
        flake8_errors = result.stdout.split('\n')

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É
        error_groups = {
            'E501': '–î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏',
            'F821': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'F841': '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'W605': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            'E262': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        }

        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
        grouped_errors = set()
        for code, desc in error_groups.items():
            matches = [e for e in flake8_errors if code in e]
            if matches:
                print(f"\nüîç Flake8 - {desc}:")
                for error in matches:
                    print(f"- {error.split(':')[0]}")
                    grouped_errors.add(error)

        # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏
        other_errors = [e for e in flake8_errors if e and e not in grouped_errors]
        if other_errors:
            print("\nüîç Flake8 - –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏:")
            for error in other_errors:
                print(f"- {error.split(':')[0]}")

    except subprocess.CalledProcessError as e:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ flake8: ")
        print(e.stdout)
        flake8_success = False

    return mypy_success and flake8_success

def lint():
    """
    –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞.
    """
    format()
    check()

def test():
    """
    –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
    """
    env = os.environ.copy()
    env["ENV_FILE"] = ".env.test"
    try:
        subprocess.run(
            ["pytest", "tests/", "-v"],
            env=env,
            check=True
        )
    except subprocess.CalledProcessError:
        pass

def start_all():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–µ—Ä"""
    migrate()
    serve()
