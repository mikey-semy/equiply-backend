import os
import subprocess
from pathlib import Path
from typing import Optional
import time
import socket
import uvicorn

ENV_FILE=".env.dev"
# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).parents[1]
COMPOSE_FILE_FULL = "docker-compose.dev.full.yml"
COMPOSE_FILE_WITHOUT_BACKEND = "docker-compose.dev.yml"

DEFAULT_PORTS = {
    'FASTAPI': 8000,
    'RABBITMQ': 5672,      # –ü–æ—Ä—Ç –¥–ª—è AMQP
    'RABBITMQ_UI': 15672,  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    'POSTGRES': 5432,
    'REDIS': 6379,
    'PGADMIN': 5050,
    'REDIS_COMMANDER': 8081,
    'GRAFANA': 3334,
    'LOKI': 3100
}

def run_compose_command(command: str | list, compose_file: str = COMPOSE_FILE_FULL, env: dict = None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç docker-compose –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    if isinstance(command, str):
        command = command.split()

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    environment = os.environ.copy()
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ ENV_FILE –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    env_file = os.path.join(ROOT_DIR, ENV_FILE)
    if os.path.exists(env_file):
        with open(env_file) as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    environment[key] = value
    if env:
        environment.update(env)

    subprocess.run(
        ["docker-compose", "-f", compose_file] + command,
        cwd=ROOT_DIR,
        check=True,
        env=environment
    )

def infra_up():
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –≤—Å—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    run_compose_command(["up", "-d"])

def infra_down():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    run_compose_command("down")

def infra_build():
    """–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    run_compose_command("build")

def infra_logs():
    """–°–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏"""
    run_compose_command("logs -f")

def infra_restart():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã"""
    run_compose_command("restart")

def infra_nuke():
    """–°–Ω–æ—Å–∏–º –Ω–∞—Ö—Ä–µ–Ω –≤—Å—ë –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –∑–∞–Ω–æ–≤–æ"""
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    run_compose_command(["down", "--volumes", "--remove-orphans", "--rmi", "all"])

    # –ß–∏—Å—Ç–∏–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ volumes
    subprocess.run(["docker", "volume", "prune", "-f"], check=True)

    # –ß–∏—Å—Ç–∏–º –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ images
    subprocess.run(["docker", "image", "prune", "-af"], check=True)

    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω–æ–≤–æ
    run_compose_command("build --no-cache")

    # –ü–æ–¥–Ω–∏–º–∞–µ–º
    run_compose_command(["up", "-d"])

def grafana_restart():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Grafana –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    run_compose_command(["restart", "grafana", "loki", "promtail"], COMPOSE_FILE_WITHOUT_BACKEND)

def grafana_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Grafana –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    run_compose_command(["logs", "-f", "grafana", "loki", "promtail"], COMPOSE_FILE_WITHOUT_BACKEND)

def grafana_rebuild():
    """–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Grafana –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    run_compose_command(["up", "-d", "--build", "grafana", "loki", "promtail"], COMPOSE_FILE_WITHOUT_BACKEND)

def find_free_port(start_port: int = 8000) -> int:
    """–ò—â–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ"""
    port = start_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤! –ê—Ö—É–µ—Ç—å!")

def get_available_port(default_port: int) -> int:
    port = default_port
    while port < 65535:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('', port))
                return port
        except OSError:
            port += 1
    raise RuntimeError(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –ø–æ—Å–ª–µ {default_port}")

def get_port(service: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    service_upper = service.upper().replace('_PORT', '')
    return int(os.getenv(service, DEFAULT_PORTS[service_upper]))

def check_service(name: str, port: int, retries: int = 5, delay: int = 2) -> bool:
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    for _ in range(retries):
        try:
            sock.connect(('localhost', port))
            sock.close()
            return True
        except:
            print(f"‚è≥ –ñ–¥—ë–º {name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            time.sleep(delay)
    return False

def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services_config = {
        'Redis': ('REDIS_PORT', 5),
        'RabbitMQ': ('RABBITMQ_UI_PORT', 5),
        'PostgreSQL': ('POSTGRES_PORT', 30),
        'Grafana': ('GRAFANA_PORT', 5),
        'Loki': ('LOKI_PORT', 5)
    }

    for service_name, (port_key, retries) in services_config.items():
        port = get_port(port_key)
        if not check_service(service_name, port, retries):
            print(f"‚ùå {service_name} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}!")
            return False
    return True

def start_infrastructure():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    try:

        # –°–Ω–∞—á–∞–ª–∞ —É–±–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        run_compose_command("down --remove-orphans")

        # –û—á–∏—â–∞–µ–º —Ç–æ–º–∞
        subprocess.run(["docker", "volume", "prune", "-f"], check=True)

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
        ports = {
            service: get_available_port(default_port)
            for service, default_port in DEFAULT_PORTS.items()
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã –≤ docker-compose —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env = {
            f"{service}_PORT": str(port)
            for service, port in ports.items()
        }

        run_compose_command(["up", "-d"], COMPOSE_FILE_WITHOUT_BACKEND, env=env)

        # –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        check_services()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∏—è PostgreSQL
        print("üì¶ –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...")
        migrate()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")


        print("\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
        print(f"üìä FastAPI Swagger:    http://localhost:{ports['FASTAPI']}/docs")
        print(f"üê∞ RabbitMQ UI:       http://localhost:{ports['RABBITMQ_UI']}")
        print(f"üóÑÔ∏è PostgreSQL:        localhost:{ports['POSTGRES']}")
        print(f"üì¶ Redis:             localhost:{ports['REDIS']}")
        print(f"üîç PgAdmin:           http://localhost:{ports['PGADMIN']}")
        print(f"üìä Redis Commander:    http://localhost:{ports['REDIS_COMMANDER']}")
        print(f"üìä Grafana:           http://localhost:{ports['GRAFANA']}")
        print(f"üìà Loki:              http://localhost:{ports['LOKI']}\n")

        print("‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def dev(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    # if not check_rabbitmq():
    #     print("üî¥ RabbitMQ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
    #     print("net start RabbitMQ")
    #     return

    # print("üü¢ RabbitMQ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if not start_infrastructure():
        return

    if port is None:
        port = find_free_port()


    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="debug",
        access_log=False
    )

def serve(port: Optional[int] = None):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç uvicorn —Å–µ—Ä–≤–µ—Ä

    Args:
        port: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞. –ï—Å–ª–∏ None - –Ω–∞–π–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π
    """
    if port is None:
        port = find_free_port()

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    subprocess.run([
        "uvicorn",
        "app.main:app",
        "--host", "0.0.0.0",
        "--port", "8000",
        "--proxy-headers",
        "--forwarded-allow-ips=*"
    ], check=True)

def migrate():
    """
    –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    subprocess.run(["alembic", "upgrade", "head"], check=True)

def rollback():
    """
    –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π.
    """
    subprocess.run(["alembic", "downgrade", "-1"], check=True)

def create_migration(name: str):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.
    """
    subprocess.run(["alembic", "revision", "--autogenerate", "-m", name], check=True)

def echo(message: str):
    """
    –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã).
    """
    import sys
    if len(sys.argv) > 1:
        message = " ".join(sys.argv[1:])
        echo(message)
    subprocess.run(["echo", message], check=True)

def format():
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
    """
    subprocess.run(["black", "app/"], check=True)
    subprocess.run(["isort", "app/"], check=True)

def check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞.
    """
    mypy_success = True
    flake8_success = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ mypy
    try:
        mypy_result = subprocess.run(
            ["mypy", "app/"],
            capture_output=True,
            text=True,
            check=True
        )
        mypy_errors = mypy_result.stdout.split('\n')

        mypy_error_groups = {
            'error: Incompatible': '–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã',
            'error: Name': '–û—à–∏–±–∫–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è',
            'error: Missing': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã',
            'error: Argument': '–û—à–∏–±–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤',
            'error: Return': '–û—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π'
        }

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        grouped_errors = set()
        for pattern, desc in mypy_error_groups.items():
            matches = [e for e in mypy_errors if pattern in e]
            if matches:
                print(f"\nüîç MyPy - {desc}:")
                for error in matches:
                    print(f"- {error}")
                    grouped_errors.add(error)

        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ "–ü—Ä–æ—á–∏–µ"
        other_errors = [e for e in mypy_errors if e and e not in grouped_errors]
        if other_errors:
            print("\nüîç MyPy - –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏:")
            for error in other_errors:
                print(f"- {error}")
    except subprocess.CalledProcessError as e:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ mypy:")
        print(e.stdout)
        mypy_success = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ flake8
    try:
        result = subprocess.run(
            ["flake8", "app/"],
            capture_output=True,
            text=True,
            check=True
        )
        flake8_errors = result.stdout.split('\n')

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É
        error_groups = {
            'E501': '–î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏',
            'F821': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'F841': '–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'W605': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            'E262': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        }

        # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
        grouped_errors = set()
        for code, desc in error_groups.items():
            matches = [e for e in flake8_errors if code in e]
            if matches:
                print(f"\nüîç Flake8 - {desc}:")
                for error in matches:
                    print(f"- {error.split(':')[0]}")
                    grouped_errors.add(error)

        # –í—ã–≤–æ–¥–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—à–∏–±–∫–∏
        other_errors = [e for e in flake8_errors if e and e not in grouped_errors]
        if other_errors:
            print("\nüîç Flake8 - –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏:")
            for error in other_errors:
                print(f"- {error.split(':')[0]}")

    except subprocess.CalledProcessError as e:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ flake8: ")
        print(e.stdout)
        flake8_success = False

    return mypy_success and flake8_success

def lint():
    """
    –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞.
    """
    format()
    check()

def test():
    """
    –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤.
    """
    env = os.environ.copy()
    env["ENV_FILE"] = ".env.test"
    try:
        subprocess.run(
            ["pytest", "tests/", "-v"],
            env=env,
            check=True
        )
    except subprocess.CalledProcessError:
        pass

def start_all():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–µ—Ä–≤–µ—Ä"""
    migrate()
    serve()
