from typing import List, Optional

from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, Path, Query

from app.core.security.auth import get_current_user
from app.routes.base import BaseRouter
from app.schemas import CurrentUserSchema, Page, PaginationParams
from app.schemas.v1.access import (AccessPolicyCreateSchema,
                                   AccessPolicySchema,
                                   AccessPolicyUpdateSchema,
                                   AccessRuleCreateSchema, AccessRuleSchema,
                                   AccessRuleUpdateSchema)
from app.schemas.v1.access.requests import (PermissionCheckRequestSchema,
                                            UpdateUserAccessSettingsSchema)
from app.schemas.v1.access.responses import (AccessPolicyCreateResponseSchema,
                                             AccessPolicyDeleteResponseSchema,
                                             AccessPolicyListResponseSchema,
                                             AccessPolicyUpdateResponseSchema,
                                             AccessRuleCreateResponseSchema,
                                             AccessRuleDeleteResponseSchema,
                                             AccessRuleListResponseSchema,
                                             AccessRuleResponseSchema,
                                             AccessRuleUpdateResponseSchema,
                                             UserAccessSettingsResponseSchema,
                                             UserPermissionsResponseSchema)
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.services.v1.access.service import AccessControlService


class AccessControlRouter(BaseRouter):
    """–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""

    def __init__(self):
        super().__init__(prefix="access", tags=["Access Control"])

    def configure(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""

        @self.router.post(
            path="/policies/",
            response_model=AccessPolicySchema,
            status_code=201,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def create_policy(
            policy_data: AccessPolicyCreateSchema,
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicyCreateResponseSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            * **permissions**: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            * **description**: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **conditions**: –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **priority**: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * AccessPolicyCreateResponseSchema: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏
            """
            return await access_service.create_policy(
                policy_data=policy_data, current_user=current_user
            )

        @self.router.get(
            path="/policies/",
            response_model=List[AccessPolicySchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def get_policies(
            access_service: FromDishka[AccessControlService],
            skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
            limit: int = Query(
                10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            ),
            sort_by: str = Query("created_at", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
            sort_desc: bool = Query(True, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
            workspace_id: Optional[int] = Query(
                None, description="ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            ),
            resource_type: Optional[str] = Query(None, description="–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞"),
            name: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> List[AccessPolicySchema]:
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏. –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–∏—Ç–∏–∫–∏
            –≤ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º–∏.

            ### Args:
            * **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            * **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ—Ç 1 –¥–æ 100)
            * **sort_by**: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            * **sort_desc**: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **name**: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
            """
            pagination = PaginationParams(
                skip=skip, limit=limit, sort_by=sort_by, sort_desc=sort_desc
            )

            policies, total = await access_service.get_policies(
                pagination=pagination,
                workspace_id=workspace_id,
                resource_type=resource_type,
                name=name,
                current_user=current_user,
            )

            page = Page(
                items=policies, total=total, page=pagination.page, size=pagination.limit
            )

            return AccessPolicyListResponseSchema(data=page)

        @self.router.get(
            path="/policies/{policy_id}",
            response_model=AccessPolicySchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 404: {
                #     "model": NotFoundResponseSchema,
                #     "description": "–ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # },
                # 403: {
                #     "model": AccessDeniedResponseSchema,
                #     "description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                # }
            },
        )
        @inject
        async def get_policy(
            access_service: FromDishka[AccessControlService],
            policy_id: int = Path(..., description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicySchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –µ—ë ID.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            ### Returns:
            * –î–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.get_policy(
                policy_id=policy_id, current_user=current_user
            )

        @self.router.put(
            path="/policies/{policy_id}",
            response_model=AccessPolicySchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": AccessDeniedResponseSchema,
                #     "description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                # },
                # 404: {
                #     "model": NotFoundResponseSchema,
                #     "description": "–ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # }
            },
        )
        @inject
        async def update_policy(
            access_service: FromDishka[AccessControlService],
            policy_data: AccessPolicyUpdateSchema,
            policy_id: int = Path(..., description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicyUpdateResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–µ –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **description**: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **conditions**: –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **permissions**: –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **priority**: –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_active**: –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_public**: –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            """

            return await access_service.update_policy(
                policy_id=policy_id, policy_data=policy_data, current_user=current_user
            )

        @self.router.delete(
            path="/policies/{policy_id}",
            response_model=AccessPolicyDeleteResponseSchema,
            status_code=200,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": AccessDeniedResponseSchema,
                #     "description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                # },
                # 404: {
                #     "model": NotFoundResponseSchema,
                #     "description": "–ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # }
            },
        )
        @inject
        async def delete_policy(
            access_service: FromDishka[AccessControlService],
            policy_id: int = Path(..., description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicyDeleteResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –£–¥–∞–ª—è–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            ### Returns:
            * –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏

            ### Raises:
            * **403**: –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            * **404**: –ï—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            """
            return await access_service.delete_policy(
                policy_id=policy_id, current_user=current_user
            )

        @self.router.post(
            path="/rules/",
            response_model=AccessRuleSchema,
            status_code=201,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": AccessDeniedResponseSchema,
                #     "description": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                # },
                # 404: {
                #     "model": NotFoundResponseSchema,
                #     "description": "–ü–æ–ª–∏—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # },
                # 422: {
                #     "model": ValidationErrorResponseSchema,
                #     "description": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                # }
            },
        )
        @inject
        async def create_rule(
            rule_data: AccessRuleCreateSchema,
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleCreateResponseSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            * **subject_id**: ID —Å—É–±—ä–µ–∫—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã)
            * **subject_type**: –¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞ ('user' –∏–ª–∏ 'group')
            * **attributes**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∞–≤–∏–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°–æ–∑–¥–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.create_rule(
                rule_data=rule_data, current_user=current_user
            )

        @self.router.get(
            path="/rules/",
            response_model=List[AccessRuleSchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": ForbiddenResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
            },
        )
        @inject
        async def get_rules(
            access_service: FromDishka[AccessControlService],
            skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
            limit: int = Query(
                10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            ),
            sort_by: str = Query("created_at", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
            sort_desc: bool = Query(True, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
            policy_id: Optional[int] = Query(None, description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            resource_type: Optional[str] = Query(None, description="–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞"),
            resource_id: Optional[int] = Query(None, description="ID —Ä–µ—Å—É—Ä—Å–∞"),
            subject_id: Optional[int] = Query(None, description="ID —Å—É–±—ä–µ–∫—Ç–∞"),
            subject_type: Optional[str] = Query(None, description="–¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleListResponseSchema:
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π.

            ### Args:
            * **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            * **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ—Ç 1 –¥–æ 100)
            * **sort_by**: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            * **sort_desc**: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **subject_id**: ID —Å—É–±—ä–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **subject_type**: –¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
            """
            pagination = PaginationParams(
                skip=skip, limit=limit, sort_by=sort_by, sort_desc=sort_desc
            )

            rules, total = await access_service.get_rules(
                pagination=pagination,
                policy_id=policy_id,
                resource_type=resource_type,
                resource_id=resource_id,
                subject_id=subject_id,
                subject_type=subject_type,
                current_user=current_user,
            )

            page = Page(
                items=rules, total=total, page=pagination.page, size=pagination.limit
            )

            return AccessRuleListResponseSchema(data=page)

        @self.router.get(
            path="/rules/{rule_id}",
            response_model=AccessRuleSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": ForbiddenResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": NotFoundResponseSchema,
                #     "description": "–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                # }
            },
        )
        @inject
        async def get_rule(
            access_service: FromDishka[AccessControlService],
            rule_id: int = Path(..., description="ID –ø—Ä–∞–≤–∏–ª–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleResponseSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –µ–≥–æ ID.

            ### Args:
            * **rule_id**: ID –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            ### Returns:
            * –î–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.get_rule(
                rule_id=rule_id, current_user=current_user
            )

        @self.router.put(
            path="/rules/{rule_id}",
            response_model=AccessRuleSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": ForbiddenResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": NotFoundResponseSchema,
                #     "description": "–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                # }
            },
        )
        @inject
        async def update_rule(
            access_service: FromDishka[AccessControlService],
            rule_data: AccessRuleUpdateSchema,
            rule_id: int = Path(..., description="ID –ø—Ä–∞–≤–∏–ª–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleUpdateResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–µ –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **rule_id**: ID –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **attributes**: –ù–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∞–≤–∏–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_active**: –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.update_rule(
                rule_id=rule_id, rule_data=rule_data, current_user=current_user
            )

        @self.router.delete(
            path="/rules/{rule_id}",
            response_model=AccessRuleDeleteResponseSchema,
            status_code=200,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                #     403: {
                #         "model": ForbiddenResponseSchema,
                #         "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                #     },
                #     404: {
                #         "model": NotFoundResponseSchema,
                #         "description": "–ü—Ä–∞–≤–∏–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                #     }
            },
        )
        @inject
        async def delete_rule(
            access_service: FromDishka[AccessControlService],
            rule_id: int = Path(..., description="ID –ø—Ä–∞–≤–∏–ª–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleDeleteResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **rule_id**: ID –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞
            """
            await access_service.delete_rule(rule_id=rule_id, current_user=current_user)

        @self.router.post(
            path="/check-permission/",
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def check_permission(
            request: PermissionCheckRequestSchema,
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> bool:
            """
            ## üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞
            * **permission**: –¢–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            * **context**: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            """
            await access_service.check_permission(
                user_id=current_user.id,
                resource_type=request.resource_type,
                resource_id=request.resource_id,
                permission=request.permission,
                context=request.context,
            )

        @self.router.get(
            path="/user-permissions/{resource_type}/{resource_id}",
            response_model=UserPermissionsResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def get_user_permissions(
            access_service: FromDishka[AccessControlService],
            resource_type: str = Path(..., description="–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞"),
            resource_id: int = Path(..., description="ID —Ä–µ—Å—É—Ä—Å–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> UserPermissionsResponseSchema:
            """
            ## üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.

            ### Args:
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞

            ### Returns:
            * –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
            """
            permissions = await access_service.get_user_permissions(
                user_id=current_user.id,
                resource_type=resource_type,
                resource_id=resource_id,
            )

            return UserPermissionsResponseSchema(
                resource_type=resource_type,
                resource_id=resource_id,
                permissions=permissions,
            )

        @self.router.get(
            path="/settings/",
            response_model=UserAccessSettingsResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def get_user_access_settings(
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> UserAccessSettingsResponseSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            ### Returns:
            * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await access_service.get_user_settings(current_user.id)

        @self.router.put(
            path="/settings/",
            response_model=UserAccessSettingsResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def update_user_access_settings(
            access_service: FromDishka[AccessControlService],
            settings_data: UpdateUserAccessSettingsSchema,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> UserAccessSettingsResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **default_workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **default_permission**: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await access_service.update_user_settings(
                user_id=current_user.id, settings_data=settings_data
            )
