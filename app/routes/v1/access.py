from typing import List, Optional

from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, Path, Query

from app.core.security.auth import get_current_user
from app.routes.base import BaseRouter
from app.schemas import CurrentUserSchema
from app.schemas.v1.access.requests import PermissionCheckRequestSchema
from app.schemas.v1.access.responses import (
    PermissionCheckResponseSchema, UserPermissionsResponseSchema
)
from app.schemas.v1.access import (
    AccessPolicyCreateSchema, AccessPolicySchema, AccessPolicyUpdateSchema,
    AccessRuleCreateSchema, AccessRuleSchema, AccessRuleUpdateSchema
)
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.services.v1.access.service import AccessControlService


class AccessControlRouter(BaseRouter):
    """–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""

    def __init__(self):
        super().__init__(prefix="access", tags=["Access Control"])

    def configure(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""

        @self.router.post(
            path="/policies/",
            response_model=AccessPolicySchema,
            status_code=201,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def create_policy(
            policy_data: AccessPolicyCreateSchema,
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicySchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            * **permissions**: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            * **description**: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **conditions**: –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **priority**: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°–æ–∑–¥–∞–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.create_policy(
                policy_data=policy_data,
                user=current_user
            )

        @self.router.get(
            path="/policies/",
            response_model=List[AccessPolicySchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def get_policies(
            access_service: FromDishka[AccessControlService],
            workspace_id: Optional[int] = Query(None, description="ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"),
            resource_type: Optional[str] = Query(None, description="–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> List[AccessPolicySchema]:
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏.
            –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–∏—Ç–∏–∫–∏ –≤ —Å–≤–æ–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°–ø–∏—Å–æ–∫ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.get_policies_with_auth(
                user=current_user,
                workspace_id=workspace_id,
                resource_type=resource_type
            )

        @self.router.get(
            path="/policies/{policy_id}",
            response_model=AccessPolicySchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def get_policy(
            access_service: FromDishka[AccessControlService],
            policy_id: int = Path(..., description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicySchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –µ—ë ID.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            ### Returns:
            * –î–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.get_policy_with_auth(
                policy_id=policy_id,
                user=current_user
            )

        @self.router.put(
            path="/policies/{policy_id}",
            response_model=AccessPolicySchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def update_policy(
            access_service: FromDishka[AccessControlService],
            policy_data: AccessPolicyUpdateSchema,
            policy_id: int = Path(..., description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessPolicySchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–∏—Ç–∏–∫–µ –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **description**: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **conditions**: –ù–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **permissions**: –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **priority**: –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_active**: –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.update_policy_with_auth(
                policy_id=policy_id,
                policy_data=policy_data,
                user=current_user
            )

        @self.router.delete(
            path="/policies/{policy_id}",
            status_code=204,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def delete_policy(
            access_service: FromDishka[AccessControlService],
            policy_id: int = Path(..., description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> None:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

            –£–¥–∞–ª—è–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            """
            await access_service.delete_policy_with_auth(
                policy_id=policy_id,
                user=current_user
            )

        @self.router.post(
            path="/rules/",
            response_model=AccessRuleSchema,
            status_code=201,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def create_rule(
            rule_data: AccessRuleCreateSchema,
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            * **subject_id**: ID —Å—É–±—ä–µ–∫—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≥—Ä—É–ø–ø—ã)
            * **subject_type**: –¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞ ('user' –∏–ª–∏ 'group')
            * **attributes**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∞–≤–∏–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°–æ–∑–¥–∞–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.create_rule_with_auth(
                rule_data=rule_data,
                user=current_user
            )

        @self.router.get(
            path="/rules/",
            response_model=List[AccessRuleSchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def get_rules(
            access_service: FromDishka[AccessControlService],
            policy_id: Optional[int] = Query(None, description="ID –ø–æ–ª–∏—Ç–∏–∫–∏"),
            resource_type: Optional[str] = Query(None, description="–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞"),
            resource_id: Optional[int] = Query(None, description="ID —Ä–µ—Å—É—Ä—Å–∞"),
            subject_id: Optional[int] = Query(None, description="ID —Å—É–±—ä–µ–∫—Ç–∞"),
            subject_type: Optional[str] = Query(None, description="–¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> List[AccessRuleSchema]:
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.

            ### Args:
            * **policy_id**: ID –ø–æ–ª–∏—Ç–∏–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **subject_id**: ID —Å—É–±—ä–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **subject_type**: –¢–∏–ø —Å—É–±—ä–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.get_rules_with_auth(
                user=current_user,
                policy_id=policy_id,
                resource_type=resource_type,
                resource_id=resource_id,
                subject_id=subject_id,
                subject_type=subject_type
            )

        @self.router.get(
            path="/rules/{rule_id}",
            response_model=AccessRuleSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def get_rule(
            access_service: FromDishka[AccessControlService],
            rule_id: int = Path(..., description="ID –ø—Ä–∞–≤–∏–ª–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –µ–≥–æ ID.

            ### Args:
            * **rule_id**: ID –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            ### Returns:
            * –î–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.get_rule_with_auth(
                rule_id=rule_id,
                user=current_user
            )

        @self.router.put(
            path="/rules/{rule_id}",
            response_model=AccessRuleSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def update_rule(
            access_service: FromDishka[AccessControlService],
            rule_data: AccessRuleUpdateSchema,
            rule_id: int = Path(..., description="ID –ø—Ä–∞–≤–∏–ª–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AccessRuleSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∏–ª–µ –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **rule_id**: ID –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **attributes**: –ù–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–∞–≤–∏–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_active**: –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞
            """
            return await access_service.update_rule_with_auth(
                rule_id=rule_id,
                rule_data=rule_data,
                user=current_user
            )

        @self.router.delete(
            path="/rules/{rule_id}",
            status_code=204,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def delete_rule(
            access_service: FromDishka[AccessControlService],
            rule_id: int = Path(..., description="ID –ø—Ä–∞–≤–∏–ª–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> None:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞

            –£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–æ—Å—Ç—É–ø–∞.

            ### Args:
            * **rule_id**: ID –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–∞
            """
            await access_service.delete_rule_with_auth(
                rule_id=rule_id,
                user=current_user
            )

        @self.router.post(
            path="/check-permission/",
            response_model=PermissionCheckResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def check_permission(
            request: PermissionCheckRequestSchema,
            access_service: FromDishka[AccessControlService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> PermissionCheckResponseSchema:
            """
            ## üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞.

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞
            * **permission**: –¢–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            * **context**: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            """
            has_permission = await access_service.check_permission(
                user_id=current_user.id,
                resource_type=request.resource_type,
                resource_id=request.resource_id,
                permission=request.permission,
                context=request.context
            )

            return PermissionCheckResponseSchema(
                has_permission=has_permission,
                resource_type=str(request.resource_type),
                resource_id=request.resource_id,
                permission=str(request.permission)
            )

        @self.router.get(
            path="/user-permissions/{resource_type}/{resource_id}",
            response_model=UserPermissionsResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            }
        )
        @inject
        async def get_user_permissions(
            access_service: FromDishka[AccessControlService],
            resource_type: str = Path(..., description="–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞"),
            resource_id: int = Path(..., description="ID —Ä–µ—Å—É—Ä—Å–∞"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> UserPermissionsResponseSchema:
            """
            ## üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.

            ### Args:
            * **resource_type**: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
            * **resource_id**: ID —Ä–µ—Å—É—Ä—Å–∞

            ### Returns:
            * –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
            """
            permissions = await access_service.get_user_permissions(
                user_id=current_user.id,
                resource_type=resource_type,
                resource_id=resource_id
            )

            return UserPermissionsResponseSchema(
                resource_type=resource_type,
                resource_id=resource_id,
                permissions=permissions
            )
