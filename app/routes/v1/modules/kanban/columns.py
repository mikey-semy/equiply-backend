"""–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞–º–∏."""

from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, Path

from app.core.security.auth import get_current_user
from app.routes.base import BaseRouter
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.schemas.v1.modules.kanban.exceptions import (
    KanbanAccessDeniedResponseSchema, KanbanBoardNotFoundResponseSchema,
    KanbanColumnNotFoundResponseSchema)
from app.schemas.v1.modules.kanban.requests import (
                                                    CreateKanbanColumnSchema,
                                                    UpdateKanbanColumnSchema,
                                                    ReorderKanbanColumnsSchema,
                                                    )
from app.schemas.v1.modules.kanban.responses import (

    KanbanColumnCreateResponseSchema, KanbanColumnResponseSchema,
    KanbanColumnUpdateResponseSchema, KanbanColumnDeleteResponseSchema,
    KanbanColumnReorderResponseSchema)
from app.schemas.v1.users import CurrentUserSchema

from app.services.v1.modules.kanban.service import KanbanService


class KanbanColumnRouter(BaseRouter):
    """–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞–º–∏."""

    def __init__(self):
        super().__init__(prefix="workspaces/{workspace_id}/kanban", tags=["Kanban"])

    def configure(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–æ–∫."""

        @self.router.post(
            path="/boards/{board_id}/columns",
            response_model=KanbanColumnCreateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanBoardNotFoundResponseSchema,
                    "description": "–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def create_kanban_column(
            workspace_id: int,
            board_id: int = Path(..., description="ID –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏"),
            column_data: CreateKanbanColumnSchema = None,
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanColumnCreateResponseSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **board_id**: ID –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            * **order**: –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **wip_limit**: –õ–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.create_column(
                board_id=board_id,
                column_data=column_data,
                current_user=current_user,
            )

        @self.router.get(
            path="/columns/{column_id}",
            response_model=KanbanColumnResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanColumnNotFoundResponseSchema,
                    "description": "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def get_kanban_column(
            workspace_id: int,
            column_id: int = Path(..., description="ID –∫–æ–ª–æ–Ω–∫–∏"),
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanColumnResponseSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏ –ø–æ –µ—ë ID.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **column_id**: ID –∫–æ–ª–æ–Ω–∫–∏

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.get_column(
                column_id=column_id,
                current_user=current_user,
            )

        @self.router.put(
            path="/columns/{column_id}",
            response_model=KanbanColumnUpdateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanColumnNotFoundResponseSchema,
                    "description": "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def update_kanban_column(
            workspace_id: int,
            column_id: int = Path(..., description="ID –∫–æ–ª–æ–Ω–∫–∏"),
            column_data: UpdateKanbanColumnSchema = None,
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanColumnUpdateResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **column_id**: ID –∫–æ–ª–æ–Ω–∫–∏

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **order**: –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **wip_limit**: –ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.update_column(
                column_id=column_id,
                column_data=column_data,
                current_user=current_user,
            )

        @self.router.delete(
            path="/columns/{column_id}",
            response_model=KanbanColumnDeleteResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanColumnNotFoundResponseSchema,
                    "description": "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
            )
        @inject
        async def delete_kanban_column(
            workspace_id: int,
            column_id: int = Path(..., description="ID –∫–æ–ª–æ–Ω–∫–∏"),
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanColumnDeleteResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            –£–¥–∞–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **column_id**: ID –∫–æ–ª–æ–Ω–∫–∏

            ### Returns:
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.delete_column(
                column_id=column_id,
                current_user=current_user,
            )

        @self.router.put(
            path="/boards/{board_id}/columns/reorder",
            response_model=KanbanColumnReorderResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanBoardNotFoundResponseSchema,
                    "description": "–ö–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def reorder_kanban_columns(
            workspace_id: int,
            board_id: int = Path(..., description="ID –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏"),
            reorder_data: ReorderKanbanColumnsSchema = None,
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanColumnReorderResponseSchema:
            """
            ## üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫

            –ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **board_id**: ID –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **column_orders**: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å ID –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏—Ö –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—è–¥–∫–æ–≤—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏

            ### Returns:
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.reorder_columns(
                board_id=board_id,
                reorder_data=reorder_data,
                current_user=current_user,
            )
