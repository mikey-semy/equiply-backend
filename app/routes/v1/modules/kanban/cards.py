"""–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∞–º–∏."""

from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, Path, Query

from app.core.security.auth import get_current_user
from app.routes.base import BaseRouter
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.schemas.v1.modules.kanban.exceptions import (
    KanbanAccessDeniedResponseSchema,
    KanbanCardNotFoundResponseSchema, KanbanColumnNotFoundResponseSchema)
from app.schemas.v1.modules.kanban.requests import (
                                                    CreateKanbanCardSchema,
                                                    UpdateKanbanCardSchema,
                                                    MoveKanbanCardSchema)
from app.schemas.v1.modules.kanban.responses import (
    KanbanCardCreateResponseSchema,
    KanbanCardListResponseSchema, KanbanCardResponseSchema,
    KanbanCardUpdateResponseSchema, KanbanCardDeleteResponseSchema,
    KanbanCardMoveResponseSchema)
from app.schemas.v1.pagination import Page, PaginationParams
from app.schemas.v1.users import CurrentUserSchema
from app.services.v1.modules.kanban.service import KanbanService


class KanbanCardRouter(BaseRouter):
    """–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–±–∞–Ω-–∫–∞—Ä—Ç–æ—á–∫–∞–º–∏."""

    def __init__(self):
        super().__init__(prefix="workspaces/{workspace_id}/kanban", tags=["Kanban"])

    def configure(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–æ–∫."""

        @self.router.post(
            path="/columns/{column_id}/cards",
            response_model=KanbanCardCreateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanColumnNotFoundResponseSchema,
                    "description": "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def create_kanban_card(
            workspace_id: int,
            column_id: int = Path(..., description="ID –∫–æ–ª–æ–Ω–∫–∏"),
            card_data: CreateKanbanCardSchema = None,
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanCardCreateResponseSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–ª–æ–Ω–∫–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **column_id**: ID –∫–æ–ª–æ–Ω–∫–∏

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **title**: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            * **description**: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **order**: –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **data**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.create_card(
                column_id=column_id,
                card_data=card_data,
                current_user=current_user,
            )

        @self.router.get(
            path="/columns/{column_id}/cards",
            response_model=KanbanCardListResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanColumnNotFoundResponseSchema,
                    "description": "–ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def get_kanban_cards(
            workspace_id: int,
            column_id: int = Path(..., description="ID –∫–æ–ª–æ–Ω–∫–∏"),
            kanban_service: FromDishka[KanbanService] = None,
            skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
            limit: int = Query(
                50, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            ),
            sort_by: str = Query("order", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
            sort_desc: bool = Query(False, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanCardListResponseSchema:
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **column_id**: ID –∫–æ–ª–æ–Ω–∫–∏
            * **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            * **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ—Ç 1 –¥–æ 100)
            * **sort_by**: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "order")
            * **sort_desc**: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)

            ### Returns:
            * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∫–æ–ª–æ–Ω–∫–∏
            """
            pagination = PaginationParams(
                skip=skip,
                limit=limit,
                sort_by=sort_by,
                sort_desc=sort_desc,
                entity_name="KanbanCard"
            )

            cards, total = await kanban_service.get_cards(
                column_id=column_id,
                current_user=current_user,
                pagination=pagination,
            )
            page = Page(
                items=cards,
                total=total,
                page=pagination.page,
                size=pagination.limit,
            )
            return KanbanCardListResponseSchema(data=page)

        @self.router.get(
            path="/cards/{card_id}",
            response_model=KanbanCardResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanCardNotFoundResponseSchema,
                    "description": "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def get_kanban_card(
            workspace_id: int,
            card_id: int = Path(..., description="ID –∫–∞—Ä—Ç–æ—á–∫–∏"),
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanCardResponseSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏ –ø–æ –µ—ë ID.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **card_id**: ID –∫–∞—Ä—Ç–æ—á–∫–∏

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.get_card(
                card_id=card_id,
                current_user=current_user,
            )

        @self.router.put(
            path="/cards/{card_id}",
            response_model=KanbanCardUpdateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanCardNotFoundResponseSchema,
                    "description": "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def update_kanban_card(
            workspace_id: int,
            card_id: int = Path(..., description="ID –∫–∞—Ä—Ç–æ—á–∫–∏"),
            card_data: UpdateKanbanCardSchema = None,
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanCardUpdateResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **card_id**: ID –∫–∞—Ä—Ç–æ—á–∫–∏

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **title**: –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **description**: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **order**: –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **data**: –ù–æ–≤—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.update_card(
                card_id=card_id,
                card_data=card_data,
                current_user=current_user,
            )

        @self.router.delete(
            path="/cards/{card_id}",
            response_model=KanbanCardDeleteResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanCardNotFoundResponseSchema,
                    "description": "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def delete_kanban_card(
            workspace_id: int,
            card_id: int = Path(..., description="ID –∫–∞—Ä—Ç–æ—á–∫–∏"),
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanCardDeleteResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏

            –£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **card_id**: ID –∫–∞—Ä—Ç–æ—á–∫–∏

            ### Returns:
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.delete_card(
                card_id=card_id,
                current_user=current_user,
            )

        @self.router.put(
            path="/cards/{card_id}/move",
            response_model=KanbanCardMoveResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": KanbanAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": KanbanCardNotFoundResponseSchema,
                    "description": "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                },
            },
        )
        @inject
        async def move_kanban_card(
            workspace_id: int,
            card_id: int = Path(..., description="ID –∫–∞—Ä—Ç–æ—á–∫–∏"),
            move_data: MoveKanbanCardSchema = None,
            kanban_service: FromDishka[KanbanService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> KanbanCardMoveResponseSchema:
            """
            ## üîÑ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏

            –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç –µ—ë –ø–æ—Ä—è–¥–æ–∫.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **card_id**: ID –∫–∞—Ä—Ç–æ—á–∫–∏

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **target_column_id**: ID —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–∏)
            * **new_order**: –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await kanban_service.move_card(
                card_id=card_id,
                move_data=move_data,
                current_user=current_user,
            )