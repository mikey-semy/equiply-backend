from typing import Optional
from io import BytesIO
from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, Path, Query, File, UploadFile, BackgroundTasks
from fastapi.responses import StreamingResponse
from app.core.security.access import require_permission
from app.core.security.auth import get_current_user
from app.models.v1.access import PermissionType, ResourceType
from app.routes.base import BaseRouter
from app.schemas.v1.pagination import Page, PaginationParams, TableSortFields
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.schemas import (CreateTableSchema, CurrentUserSchema,
                         TableDefinitionCreateResponseSchema,
                         TableDefinitionListResponseSchema,
                         TableDefinitionUpdateResponseSchema,
                         TableDefinitionDeleteResponseSchema,
                         TableDefinitionResponseSchema,
                         )
from app.services.v1.modules.tables.service import TableService


class TableRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="workspaces/{workspace_id}/tables", tags=["Tables"])

    def configure(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü."""
        @self.router.post(
            path="/",
            response_model=TableDefinitionCreateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": WorkspaceAccessDeniedResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": WorkspaceNotFoundResponseSchema,
                #     "description": "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                # },
            },
        )
        @inject
        async def create_table(
            workspace_id: int,
            data: CreateTableSchema,
            table_service: FromDishka[TableService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> TableDefinitionCreateResponseSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            * **description**: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **model_json_schema**: –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            """
            return await table_service.create_table(
                workspace_id=workspace_id,
                name=data.name,
                description=data.description,
                table_schema=data.model_json_schema,
                current_user=current_user,
            )

        @self.router.get(
            path="/",
            response_model=Page[TableDefinitionResponseSchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": WorkspaceAccessDeniedResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": WorkspaceNotFoundResponseSchema,
                #     "description": "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                # },
            },
        )
        @inject
        async def get_tables(
            workspace_id: int,
            table_service: FromDishka[TableService],
            skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
            limit: int = Query(
                10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            ),
            sort_by: Optional[str] = Query(
                TableSortFields.get_default().field,
                description=(
                    "–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {', '.join(TableSortFields.get_field_values())}. "
                    f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {TableSortFields.get_default().field} "
                    f"({TableSortFields.get_default().description})."
                ),
                enum=TableSortFields.get_field_values(),
            ),
            sort_desc: bool = Query(True, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
            search: Optional[str] = Query(
                None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–∞–±–ª–∏—Ü—ã"
            ),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ):
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            * **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ—Ç 1 –¥–æ 100)
            * **sort_by**: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            * **sort_desc**: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            * **search**: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
            """
            pagination = PaginationParams(
                skip=skip,
                limit=limit,
                sort_by=sort_by,
                sort_desc=sort_desc,
                entity_name="Table",
            )
            tables, total = await table_service.get_tables(
                workspace_id=workspace_id,
                current_user=current_user,
                pagination=pagination,
                search=search,
            )

            page = Page(
                items=tables,
                total=total,
                page=pagination.page,
                size=pagination.limit,
            )
            return TableDefinitionListResponseSchema(data=page)

        @self.router.get(
            path="/{table_id}",
            response_model=TableDefinitionResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": WorkspaceAccessDeniedResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": WorkspaceNotFoundResponseSchema,
                #     "description": "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # },
            },
        )
        @require_permission(
            resource_type=ResourceType.TABLE,
            permission=PermissionType.READ,
            resource_id_param="table_id"
        )
        @inject
        async def get_table(
            workspace_id: int,
            table_id: int = Path(..., description="ID —Ç–∞–±–ª–∏—Ü—ã"),
            table_service: FromDishka[TableService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> TableDefinitionResponseSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –µ—ë ID.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **table_id**: ID —Ç–∞–±–ª–∏—Ü—ã

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await table_service.get_table(
                workspace_id=workspace_id,
                table_id=table_id,
                current_user=current_user,
            )

        @self.router.put(
            path="/{table_id}",
            response_model=TableDefinitionUpdateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": WorkspaceAccessDeniedResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": WorkspaceNotFoundResponseSchema,
                #     "description": "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # },
            },
        )
        @require_permission(
            resource_type=ResourceType.WORKSPACE,
            permission=PermissionType.WRITE,
            resource_id_param="table_id"
        )
        @inject
        async def update_table(
            workspace_id: int,
            table_id: int,
            data: CreateTableSchema,
            table_service: FromDishka[TableService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> TableDefinitionUpdateResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **table_id**: ID —Ç–∞–±–ª–∏—Ü—ã

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **description**: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **model_json_schema**: –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            """
            update_data = {
                "name": data.name,
                "description": data.description,
                "model_json_schema": data.model_json_schema,
            }
            return await table_service.update_table(
                workspace_id=workspace_id,
                table_id=table_id,
                data=update_data,
                current_user=current_user,
            )

        @self.router.delete(
            path="/{table_id}",
            response_model=TableDefinitionDeleteResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                # 403: {
                #     "model": WorkspaceAccessDeniedResponseSchema,
                #     "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                # },
                # 404: {
                #     "model": WorkspaceNotFoundResponseSchema,
                #     "description": "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                # },
            },
        )
        @require_permission(
            resource_type=ResourceType.WORKSPACE,
            permission=PermissionType.DELETE,
            resource_id_param="table_id"
        )
        @inject
        async def delete_table(
            workspace_id: int,
            table_id: int = Path(..., description="ID —Ç–∞–±–ª–∏—Ü—ã"),
            table_service: FromDishka[TableService] = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> TableDefinitionDeleteResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

            –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –¥–∞–Ω–Ω—ã–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **table_id**: ID —Ç–∞–±–ª–∏—Ü—ã

            ### Returns:
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await table_service.delete_table(
                workspace_id=workspace_id,
                table_id=table_id,
                current_user=current_user,
            )

        @self.router.post(
            path="/{table_id}/import",
            response_model=TableDefinitionUpdateResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
            },
        )
        @require_permission(
            resource_type=ResourceType.TABLE,
            permission=PermissionType.WRITE,
            resource_id_param="table_id"
        )
        @inject
        async def import_table_from_excel(
            workspace_id: int,
            table_service: FromDishka[TableService],
            table_id: int = Path(..., description="ID —Ç–∞–±–ª–∏—Ü—ã"),
            file: UploadFile = File(..., description="Excel —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"),
            background_tasks: BackgroundTasks = None,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> TableDefinitionUpdateResponseSchema:
            """
            ## üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel

            –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **table_id**: ID —Ç–∞–±–ª–∏—Ü—ã
            * **file**: Excel-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            contents = await file.read()
            return await table_service.import_from_excel(
                workspace_id=workspace_id,
                table_id=table_id,
                file_contents=contents,
                filename=file.filename,
                background_tasks=background_tasks,
                current_user=current_user,
            )

        @self.router.get(
            path="/{table_id}/export",
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
            },
        )
        @require_permission(
            resource_type=ResourceType.TABLE,
            permission=PermissionType.READ,
            resource_id_param="table_id"
        )
        @inject
        async def export_table_to_excel(
            workspace_id: int,
            table_service: FromDishka[TableService],
            table_id: int = Path(..., description="ID —Ç–∞–±–ª–∏—Ü—ã"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ):
            """
            ## üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel

            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Excel-—Ñ–∞–π–ª.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **table_id**: ID —Ç–∞–±–ª–∏—Ü—ã

            ### Returns:
            * Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü—ã
            """
            excel_data, filename = await table_service.export_to_excel(
                workspace_id=workspace_id,
                table_id=table_id,
                current_user=current_user,
            )

            return StreamingResponse(
                BytesIO(excel_data),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )