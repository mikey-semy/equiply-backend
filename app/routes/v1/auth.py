from fastapi import Depends
from fastapi.security import OAuth2PasswordRequestForm
from dishka.integrations.fastapi import FromDishka, inject

from app.routes.base import BaseRouter
from app.schemas import (
    TokenResponseSchema,
    ForgotPasswordSchema,
    PasswordResetResponseSchema,
    PasswordResetConfirmSchema,
    PasswordResetConfirmResponseSchema
)
from app.schemas.v1.auth.exceptions import (
    InvalidCredentialsResponseSchema,
    TokenExpiredResponseSchema,
    TokenInvalidResponseSchema,
    UserInactiveResponseSchema,
    WeakPasswordResponseSchema
)
from app.services.v1.auth.service import AuthService

class AuthRouter(BaseRouter):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    —Ç–∞–∫–∏–µ –∫–∞–∫ –≤—Ö–æ–¥, –≤—ã—Ö–æ–¥, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.

    """
    def __init__(self):
        super().__init__(prefix="auth", tags=["Authentication"])

    def configure(self):
        @self.router.post(
            path="",
            response_model=TokenResponseSchema,
            responses={
                401: {
                    "model": InvalidCredentialsResponseSchema,
                    "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                },
                403: {
                    "model": UserInactiveResponseSchema,
                    "description": "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                }
            }
        )
        @inject
        async def authenticate(
            auth_service: FromDishka[AuthService],
            form_data: OAuth2PasswordRequestForm = Depends()
        ) -> TokenResponseSchema:
            """
            ## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É

            ### –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
            * Email-–∞–¥—Ä–µ—Å
            * –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * –¢–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX

            ### Returns:
            * **access_token**: JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            * **token_type**: –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (Bearer)
            """
            return await auth_service.authenticate(form_data)

        @self.router.post(
            path="/logout",
            responses={
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"
                }
            }
        )
        @inject
        async def logout(
            token: str,
            auth_service: FromDishka[AuthService]
        ) -> dict:
            """
            ## üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

            –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã, –¥–µ–ª–∞—è —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º

            ### Parameters:
            * **token**: –î–µ–π—Å—Ç–≤—É—é—â–∏–π JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await auth_service.logout(token)

        @self.router.post(
            path="/forgot-password",
            response_model=PasswordResetResponseSchema
        )
        @inject
        async def forgot_password(
            email_data: ForgotPasswordSchema,
            auth_service: FromDishka[AuthService]
        ) -> PasswordResetResponseSchema:
            """
            ## üìß –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è

            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email

            ### Parameters:
            * **email**: Email-–∞–¥—Ä–µ—Å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            """
            return await auth_service.send_password_reset_email(email_data.email)

        @self.router.post(
            path="/reset-password/{token}",
            response_model=PasswordResetConfirmResponseSchema,
            responses={
                400: {
                    "model": WeakPasswordResponseSchema,
                    "description": "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å"
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫"
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"
                }
            }
        )
        @inject
        async def reset_password(
            token: str,
            password_data: PasswordResetConfirmSchema,
            auth_service: FromDishka[AuthService]
        ) -> PasswordResetConfirmResponseSchema:
            """
            ## üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è

            –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è

            ### Parameters:
            * **token**: –¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏–∑ email-—Å–æ–æ–±—â–µ–Ω–∏—è (path parameter)
            * **password**: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞)

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            """
            return await auth_service.reset_password(token, password_data.password)
