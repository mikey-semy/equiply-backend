from typing import Optional

from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Cookie, Depends, Header, Query, Response
from fastapi.security import OAuth2PasswordRequestForm
from app.core.exceptions import TokenMissingError
from app.routes.base import BaseRouter
from app.schemas import (ForgotPasswordSchema, LogoutResponseSchema,
                         PasswordResetConfirmResponseSchema,
                         PasswordResetConfirmSchema,
                         PasswordResetResponseSchema, TokenResponseSchema)
from app.schemas.v1.auth.exceptions import (InvalidCredentialsResponseSchema,
                                            TokenExpiredResponseSchema,
                                            TokenInvalidResponseSchema,
                                            TokenMissingResponseSchema,
                                            UserInactiveResponseSchema,
                                            WeakPasswordResponseSchema)
from app.schemas.v1.errors import RateLimitExceededResponseSchema
from app.services.v1.auth.service import AuthService


class AuthRouter(BaseRouter):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    —Ç–∞–∫–∏–µ –∫–∞–∫ –≤—Ö–æ–¥, –≤—ã—Ö–æ–¥, –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.

    """

    def __init__(self):
        super().__init__(prefix="auth", tags=["Authentication"])

    def configure(self):
        @self.router.post(
            path="",
            response_model=TokenResponseSchema,
            responses={
                401: {
                    "model": InvalidCredentialsResponseSchema,
                    "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                },
                403: {
                    "model": UserInactiveResponseSchema,
                    "description": "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                },
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                },
            },
        )
        @inject
        async def authenticate(
            response: Response,
            auth_service: FromDishka[AuthService],
            use_cookies: bool = Query(
                False, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"
            ),
            form_data: OAuth2PasswordRequestForm = Depends(),
        ) -> TokenResponseSchema:
            """
            ## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É

            ### –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
            * Email-–∞–¥—Ä–µ—Å
            * –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * –¢–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX

            ### Returns:
            * **access_token**: JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            * **refresh_token**: –ù–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
            * **token_type**: –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (Bearer)
            """
            return await auth_service.authenticate(form_data, response, use_cookies)

        @self.router.post(
            path="/refresh",
            response_model=TokenResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω",
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
                },
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                },
            },
        )
        @inject
        async def refresh_token(
            auth_service: FromDishka[AuthService],
            response: Response,
            use_cookies: bool = Query(
                False, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤"
            ),
            refresh_token_header: str = Header(None, alias="refresh-token"),
            refresh_token_cookie: str = Cookie(None, alias="refresh_token"),
        ) -> TokenResponseSchema:
            """
            ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞

            –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ access —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é refresh —Ç–æ–∫–µ–Ω–∞.

            ### –ó–∞–≥–æ–ª–æ–≤–∫–∏:
            * **refresh_token**: Refresh —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

            ### Returns:
            * **access_token**: –ù–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
            * **refresh_token**: –ù–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
            * **token_type**: –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ (Bearer)
            """
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫ -> –∫—É–∫–∞
            refresh_token = refresh_token_header or refresh_token_cookie

            if not refresh_token:
                raise TokenMissingError()

            return await auth_service.refresh_token(refresh_token, response, use_cookies)

        @self.router.post(
            path="/logout",
            response_model=LogoutResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω",
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω",
                },
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                },
            },
        )
        @inject
        async def logout(
            auth_service: FromDishka[AuthService],
            response: Response,
            clear_cookies: bool = Query(False, description="–û—á–∏—Å—Ç–∏—Ç—å –∫—É–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"),
            authorization: str = Header(None, description="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"),
            access_token_cookie: str = Cookie(None, alias="access_token"),
        ) -> LogoutResponseSchema:
            """
            ## üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

            –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞.

            ### –ó–∞–≥–æ–ª–æ–≤–∫–∏:
            * **Authorization**: Bearer —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

            ### Returns:
            * **success**: –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ true)
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ("–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            """
            if not authorization and access_token_cookie:
                authorization = f"Bearer {access_token_cookie}"

            return await auth_service.logout(authorization, response, clear_cookies)

        @self.router.post(
            path="/forgot-password", response_model=PasswordResetResponseSchema
        )
        @inject
        async def forgot_password(
            email_data: ForgotPasswordSchema, auth_service: FromDishka[AuthService]
        ) -> PasswordResetResponseSchema:
            """
            ## üìß –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è

            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email

            ### Args:
            * **email**: Email-–∞–¥—Ä–µ—Å, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            """
            return await auth_service.send_password_reset_email(email_data.email)

        @self.router.post(
            path="/reset-password/{token}",
            response_model=PasswordResetConfirmResponseSchema,
            responses={
                400: {
                    "model": WeakPasswordResponseSchema,
                    "description": "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å",
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫",
                },
                422: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
                },
                429: {
                    "model": RateLimitExceededResponseSchema,
                    "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
                },
            },
        )
        @inject
        async def reset_password(
            token: str,
            password_data: PasswordResetConfirmSchema,
            auth_service: FromDishka[AuthService],
        ) -> PasswordResetConfirmResponseSchema:
            """
            ## üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è

            –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è

            ### Args:
            * **token**: –¢–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏–∑ email-—Å–æ–æ–±—â–µ–Ω–∏—è (path parameter)
            * **password**: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞)

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            """
            return await auth_service.reset_password(token, password_data.password)
