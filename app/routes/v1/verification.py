from dishka.integrations.fastapi import FromDishka, inject

from app.routes.base import BaseRouter
from app.schemas import (
    ResendVerificationRequestSchema,
    ResendVerificationResponseSchema,
    VerificationStatusResponseSchema
)
from app.schemas.v1.users.exceptions import UserNotFoundResponseSchema
from app.services.v1.register.service import RegisterService


class VerificationRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="verification", tags=["Verification"])

    def configure(self):
        @self.router.post(
            path="/resend",
            response_model=ResendVerificationResponseSchema,
            responses={
                404: {
                    "model": UserNotFoundResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        @inject
        async def resend_verification_email(
            request: ResendVerificationRequestSchema,
            register_service: FromDishka[RegisterService]
        ) -> ResendVerificationResponseSchema:
            """
            ## üìß –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email

            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **email**: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
            """
            await register_service.resend_verification_email(request.email)
            return ResendVerificationResponseSchema(email=request.email)

        @self.router.get(
            path="/status/{email}",
            response_model=VerificationStatusResponseSchema,
            responses={
                404: {
                    "model": UserNotFoundResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        @inject
        async def check_verification_status(
            email: str, register_service: FromDishka[RegisterService]
        ) -> VerificationStatusResponseSchema:
            """
            ## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **email**: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
            """
            is_verified = await register_service.check_verification_status(email)
            return VerificationStatusResponseSchema(
                email=email,
                is_verified=is_verified
            )
