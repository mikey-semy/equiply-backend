from fastapi import Depends, File, UploadFile
from dishka.integrations.fastapi import FromDishka, inject
from app.core.security.auth import get_current_user
from app.core.exceptions import InvalidCredentialsError, ProfileNotFoundError
from app.routes.base import BaseRouter
from app.schemas import ErrorResponseSchema, CurrentUserSchema, PasswordFormSchema, ProfileUpdateSchema, ProfileResponseSchema, PasswordUpdateResponseSchema, AvatarResponseSchema
from app.services.v1.profile.service import ProfileService



class ProfileRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="profile", tags=["Profile"])

    def configure(self):
        @self.router.get(
            path="",
            response_model=ProfileResponseSchema,
            responses=self.create_error_responses(
                InvalidCredentialsError,  # 401
                ProfileNotFoundError      # 404
            )
        )
        @inject
        async def get_profile(
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user)
        ) -> ProfileResponseSchema:
            """
            ## üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * **ProfileResponseSchema**: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await profile_service.get_profile(current_user)

        @self.router.put(
            path="",
            response_model=ProfileResponseSchema,
            responses={
                401: {
                    "model": ErrorResponseSchema,
                    "description": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    "content": {
                        "application/json": {
                            "example": {
                                "success": False,
                                "message": None,
                                "data": None,
                                "error": {
                                    "detail": "Not authenticated",
                                    "error_type": "http_error",
                                    "status_code": 401,
                                    "timestamp": "2025-03-13T10:58:45.254662+03:00",
                                    "request_id": "03441d78-6d5a-490d-a355-1c7452a876e9",
                                    "extra": None
                                }
                            }
                        }
                    }
                },
            }
        )
        @inject
        async def update_profile(
            profile_data: ProfileUpdateSchema,
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user)
        ) -> ProfileResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ò–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Parameters:
            * **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **email**: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **phone**: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **ProfileResponseSchema**: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await profile_service.update_profile(current_user, profile_data)

        @self.router.put(
            path="/password",
            response_model=PasswordUpdateResponseSchema,
            responses={
                401: {
                    "model": ErrorResponseSchema,
                    "description": "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω",

                },
                404: {
                    "model": ErrorResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                }
            }
        )
        @inject
        async def update_password(
            profile_service: FromDishka[ProfileService],
            password_data: PasswordFormSchema,
            current_user: CurrentUserSchema = Depends(get_current_user)
        ) -> PasswordUpdateResponseSchema:
            """
            ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Parameters:
            * **old_password**: –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            * **new_password**: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            * **confirm_password**: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            """
            return await profile_service.update_password(current_user, password_data)

        @self.router.get("/avatar", response_model=AvatarResponseSchema)
        @inject
        async def get_avatar(
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AvatarResponseSchema:
            """
            ## üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * **AvatarResponseSchema**: URL-–∞–¥—Ä–µ—Å –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await profile_service.get_avatar(current_user)

        @self.router.post("/avatar", response_model=AvatarResponseSchema)
        @inject
        async def upload_avatar(
            profile_service: FromDishka[ProfileService],
            file: UploadFile = File(
                ...,
                description="–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞",
                content_type=["image/jpeg", "image/png"],
                max_size=2_000_000,  # 2MB
            ),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AvatarResponseSchema:
            """
            ## üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Parameters:
            * **file**: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG/PNG, –¥–æ 2MB)

            ### Returns:
            * **AvatarResponseSchema**: URL-–∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
            """
            return await profile_service.update_avatar(current_user, file)
