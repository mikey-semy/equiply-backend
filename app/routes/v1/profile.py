from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, File, UploadFile, Query

from app.core.security.auth import get_current_user
from app.core.utils.username_generator import UsernameTheme
from app.routes.base import BaseRouter
from app.schemas import (AvatarResponseSchema, CurrentUserSchema,
                         PasswordFormSchema, PasswordUpdateResponseSchema,
                         ProfileResponseSchema, ProfileUpdateSchema,
                         PasswordResponseSchema, UsernameResponseSchema)
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.schemas.v1.profile.exceptions import (
    FileTooLargeResponseSchema, InvalidCurrentPasswordResponseSchema,
    InvalidFileTypeResponseSchema, ProfileNotFoundResponseSchema,
    StorageErrorResponseSchema, UserNotFoundResponseSchema)
from app.services.v1.profile.service import ProfileService


class ProfileRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="profile", tags=["Profile"])

    def configure(self):
        @self.router.get(path="", response_model=ProfileResponseSchema)
        @inject
        async def get_profile(
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> ProfileResponseSchema:
            """
            ## üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * **ProfileResponseSchema**: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await profile_service.get_profile(current_user)

        @self.router.put(
            path="",
            response_model=ProfileResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                404: {
                    "model": ProfileNotFoundResponseSchema,
                    "description": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        @inject
        async def update_profile(
            profile_data: ProfileUpdateSchema,
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> ProfileResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ò–∑–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **email**: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **phone**: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **ProfileResponseSchema**: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await profile_service.update_profile(current_user, profile_data)

        @self.router.put(
            path="/password",
            response_model=PasswordUpdateResponseSchema,
            responses={
                400: {
                    "model": InvalidCurrentPasswordResponseSchema,
                    "description": "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω",
                },
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                404: {
                    "model": UserNotFoundResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        @inject
        async def update_password(
            profile_service: FromDishka[ProfileService],
            password_data: PasswordFormSchema,
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> PasswordUpdateResponseSchema:
            """
            ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **old_password**: –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            * **new_password**: –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            * **confirm_password**: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            """
            return await profile_service.update_password(current_user, password_data)

        @self.router.get(
            path="/avatar",
            response_model=AvatarResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                404: {
                    "model": ProfileNotFoundResponseSchema,
                    "description": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        @inject
        async def get_avatar(
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AvatarResponseSchema:
            """
            ## üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * **AvatarResponseSchema**: URL-–∞–¥—Ä–µ—Å –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            return await profile_service.get_avatar(current_user)

        @self.router.post(
            path="/avatar",
            response_model=AvatarResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                413: {
                    "model": FileTooLargeResponseSchema,
                    "description": "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç (2MB)",
                },
                415: {
                    "model": InvalidFileTypeResponseSchema,
                    "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG –∏ PNG",
                },
                500: {
                    "model": StorageErrorResponseSchema,
                    "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
                },
            },
        )
        @inject
        async def upload_avatar(
            profile_service: FromDishka[ProfileService],
            file: UploadFile = File(
                ...,
                description="–§–∞–π–ª –∞–≤–∞—Ç–∞—Ä–∞",
                content_type=["image/jpeg", "image/png"],
                max_size=2_000_000,  # 2MB
            ),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AvatarResponseSchema:
            """
            ## üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Args:
            * **file**: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG/PNG, –¥–æ 2MB)

            ### Returns:
            * **AvatarResponseSchema**: URL-–∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
            """
            return await profile_service.update_avatar(current_user, file)

        @self.router.delete(
            path="/avatar",
            response_model=AvatarResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                404: {
                    "model": ProfileNotFoundResponseSchema,
                    "description": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
                500: {
                    "model": StorageErrorResponseSchema,
                    "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞",
                },
            },
        )
        @inject
        async def delete_avatar(
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> AvatarResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

            ### Returns:
                * **AvatarResponseSchema**: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
            """
            return await profile_service.delete_avatar(current_user)

        @self.router.get(
            path="/generate/username",
            response_model=UsernameResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
            },
        )
        @inject
        async def generate_username(
            profile_service: FromDishka[ProfileService],
            theme: UsernameTheme = Query(UsernameTheme.RANDOM, description="–¢–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏"),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> UsernameResponseSchema:
            """
            ## üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
                * **UsernameResponse**: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            username = await profile_service.generate_username()
            return UsernameResponseSchema(username=username)

        @self.router.get(
            path="/generate/password",
            response_model=PasswordResponseSchema,
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
            },
        )
        @inject
        async def generate_password(
            profile_service: FromDishka[ProfileService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> PasswordResponseSchema:
            """
            ## üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è

            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

            ### Returns:
            * **PasswordResponseSchema**: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            """
            password = await profile_service.generate_password()
            return PasswordResponseSchema(password=password)
