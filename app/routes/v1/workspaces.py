"""–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏."""

from dishka.integrations.fastapi import FromDishka, inject
from fastapi import Depends, Query

from app.core.security.auth import get_current_user
from app.models.v1.workspaces import WorkspaceRole
from app.routes.base import BaseRouter
from app.schemas import (AddWorkspaceMemberSchema, CreateWorkspaceSchema,
                         CurrentUserSchema, Page, PaginationParams,
                         UpdateWorkspaceMemberRoleSchema,
                         UpdateWorkspaceSchema,
                         WorkspaceAccessDeniedResponseSchema,
                         WorkspaceCreateResponseSchema, WorkspaceDataSchema,
                         WorkspaceDeleteResponseSchema,
                         WorkspaceDetailResponseSchema,
                         WorkspaceListResponseSchema,
                         WorkspaceMemberAddResponseSchema,
                         WorkspaceMemberDataSchema,
                         WorkspaceMemberRemoveResponseSchema,
                         WorkspaceMemberUpdateResponseSchema,
                         WorkspaceNotFoundResponseSchema,
                         WorkspaceResponseSchema,
                         WorkspaceUpdateResponseSchema)
from app.schemas.v1.auth.exceptions import TokenMissingResponseSchema
from app.services.v1.workspaces.service import WorkspaceService


class WorkspaceRouter(BaseRouter):
    """–ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏."""

    def __init__(self):
        super().__init__(prefix="workspaces", tags=["Workspaces"])

    def configure(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤."""

        @self.router.post(path="", response_model=WorkspaceCreateResponseSchema)
        @inject
        async def create_workspace(
            workspace_data: CreateWorkspaceSchema,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceCreateResponseSchema:
            """
            ## ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞.

            ### Args:
            * **name**: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **description**: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_public**: –§–ª–∞–≥ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.create_workspace(
                workspace_data, current_user
            )

        @self.router.get(
            path="",
            response_model=Page[WorkspaceDataSchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                }
            },
        )
        @inject
        async def get_workspaces(
            workspace_service: FromDishka[WorkspaceService],
            skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
            limit: int = Query(
                10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            ),
            sort_by: str = Query("updated_at", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
            sort_desc: bool = Query(True, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
            search: str = Query(
                None, description="–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            ),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> Page[WorkspaceDataSchema]:
            """
            ## üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

            ### Args:
            * **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            * **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ—Ç 1 –¥–æ 100)
            * **sort_by**: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            * **sort_desc**: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            * **search**: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º–∏
            """
            pagination = PaginationParams(
                skip=skip, limit=limit, sort_by=sort_by, sort_desc=sort_desc
            )

            workspaces, total = await workspace_service.get_workspaces(
                current_user=current_user,
                pagination=pagination,
                search=search,
            )

            return Page(
                items=workspaces,
                total=total,
                page=pagination.page,
                size=pagination.limit,
            )

        @self.router.get("/{workspace_id}", response_model=WorkspaceResponseSchema)
        @inject
        async def get_workspace(
            workspace_id: int,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceResponseSchema:
            """
            ## üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ø–æ –µ–≥–æ ID.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.get_workspace(workspace_id, current_user)

        @self.router.get(
            "/{workspace_id}/details", response_model=WorkspaceDetailResponseSchema
        )
        @inject
        async def get_workspace_details(
            workspace_id: int,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceDetailResponseSchema:
            """
            ## üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –∏ —Å–ø–∏—Å–∫–æ–≤.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### Returns:
            * **data**: –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.get_workspace_details(
                workspace_id, current_user
            )

        @self.router.put(
            path="/{workspace_id}", response_model=WorkspaceUpdateResponseSchema
        )
        @inject
        async def update_workspace(
            workspace_id: int,
            workspace_data: UpdateWorkspaceSchema,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceUpdateResponseSchema:
            """
            ## ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **name**: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **description**: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            * **is_public**: –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            updated_workspace = await workspace_service.update_workspace(
                workspace_id, current_user, workspace_data
            )
            return WorkspaceUpdateResponseSchema(data=updated_workspace)

        @self.router.delete(
            "/{workspace_id}", response_model=WorkspaceDeleteResponseSchema
        )
        @inject
        async def delete_workspace(
            workspace_id: int,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceDeleteResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –£–¥–∞–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### Returns:
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.delete_workspace(workspace_id, current_user)

        @self.router.get(
            path="/{workspace_id}/members",
            response_model=Page[WorkspaceMemberDataSchema],
            responses={
                401: {
                    "model": TokenMissingResponseSchema,
                    "description": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                },
                403: {
                    "model": WorkspaceAccessDeniedResponseSchema,
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
                },
                404: {
                    "model": WorkspaceNotFoundResponseSchema,
                    "description": "–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                },
            },
        )
        @inject
        async def get_workspace_members(
            workspace_service: FromDishka[WorkspaceService],
            workspace_id: int,
            skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"),
            limit: int = Query(
                10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            ),
            sort_by: str = Query("updated_at", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
            sort_desc: bool = Query(True, description="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é"),
            role: WorkspaceRole = Query(
                None, description="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
            ),
            search: str = Query(
                None, description="–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
            ),
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> Page[WorkspaceMemberDataSchema]:
            """
            ## üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **skip**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            * **limit**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–æ—Ç 1 –¥–æ 100)
            * **sort_by**: –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            * **sort_desc**: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é

            ### Returns:
            * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            """
            pagination = PaginationParams(
                skip=skip, limit=limit, sort_by=sort_by, sort_desc=sort_desc
            )

            members, total = await workspace_service.get_workspace_members(
                workspace_id=workspace_id,
                pagination=pagination,
                role=role,
                search=search,
                current_user=current_user,
            )

            return Page(
                items=members, total=total, page=pagination.page, size=pagination.limit
            )

        @self.router.post(
            "/{workspace_id}/members", response_model=WorkspaceMemberAddResponseSchema
        )
        @inject
        async def add_workspace_member(
            workspace_id: int,
            member_data: AddWorkspaceMemberSchema,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceMemberAddResponseSchema:
            """
            ## ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ

            –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **user_id**: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            * **role**: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "viewer")

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.add_workspace_member(
                workspace_id=workspace_id,
                user_id=member_data.user_id,
                role=member_data.role,
                current_user=current_user,
            )

        @self.router.put(
            "/{workspace_id}/members",
            response_model=WorkspaceMemberUpdateResponseSchema,
        )
        @inject
        async def update_workspace_member_role(
            workspace_id: int,
            member_data: UpdateWorkspaceMemberRoleSchema,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceMemberUpdateResponseSchema:
            """
            ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            ### –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
            * **user_id**: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * **role**: –ù–æ–≤–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            ### Returns:
            * **data**: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.update_workspace_member_role(
                workspace_id=workspace_id,
                user_id=member_data.user_id,
                role=member_data.role,
                current_user=current_user,
            )

        @self.router.delete(
            "/{workspace_id}/members/{user_id}",
            response_model=WorkspaceMemberRemoveResponseSchema,
        )
        @inject
        async def remove_workspace_member(
            workspace_id: int,
            user_id: int,
            workspace_service: FromDishka[WorkspaceService],
            current_user: CurrentUserSchema = Depends(get_current_user),
        ) -> WorkspaceMemberRemoveResponseSchema:
            """
            ## üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞

            –£–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
            –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/–≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞.

            ### Args:
            * **workspace_id**: ID —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            * **user_id**: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

            ### Returns:
            * **message**: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await workspace_service.remove_workspace_member(
                workspace_id=workspace_id, user_id=user_id, current_user=current_user
            )
