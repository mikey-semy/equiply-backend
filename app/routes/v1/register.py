from dishka.integrations.fastapi import FromDishka, inject

from app.routes.base import BaseRouter
from app.schemas import (RegistrationResponseSchema, RegistrationSchema,
                         VerificationResponseSchema)
from app.schemas.v1.register.exceptions import (TokenExpiredResponseSchema,
                                                TokenInvalidResponseSchema,
                                                UserCreationResponseSchema,
                                                UserExistsResponseSchema)
from app.schemas.v1.users.exceptions import UserNotFoundResponseSchema
from app.services.v1.register.service import RegisterService


class RegisterRouter(BaseRouter):
    def __init__(self):
        super().__init__(prefix="register", tags=["Registration"])

    def configure(self):
        @self.router.post(
            path="/",
            response_model=RegistrationResponseSchema,
            responses={
                409: {
                    "model": UserExistsResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email/username/—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                },
                500: {
                    "model": UserCreationResponseSchema,
                    "description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                },
            },
        )
        @inject
        async def registration_user(
            new_user: RegistrationSchema, register_service: FromDishka[RegisterService]
        ) -> RegistrationResponseSchema:
            """
            ## üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email

            ### Args:
            * **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * **email**: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * **password**: –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            * **phone**: –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

            ### Returns:
            * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
            """
            return await register_service.create_user(new_user)

        @self.router.get(
            path="/verify-email/{token}",
            response_model=VerificationResponseSchema,
            responses={
                400: {
                    "model": TokenInvalidResponseSchema,
                    "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                },
                419: {
                    "model": TokenExpiredResponseSchema,
                    "description": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫",
                },
                404: {
                    "model": UserNotFoundResponseSchema,
                    "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                },
            },
        )
        @inject
        async def verify_email(
            token: str, register_service: FromDishka[RegisterService]
        ) -> VerificationResponseSchema:
            """
            ## ‚úâÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞

            –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç email –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ –ø–∏—Å—å–º–∞

            ### Args:
            * **token**: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–∏—Å—å–º–∞

            ### Returns:
            * –°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
            """
            return await register_service.verify_email(token)
