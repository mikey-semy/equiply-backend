"""
–ú–æ–¥—É–ª—å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ email –∑–∞–¥–∞—á.

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (consumers) –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ email —Å–æ–æ–±—â–µ–Ω–∏–π,
–∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É—à–∞—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç
–ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏.

–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
- process_email: –û–±—ã—á–Ω—ã–µ email —Å–æ–æ–±—â–µ–Ω–∏—è
- process_verification_email: –ü–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
- process_password_reset_email: –ü–∏—Å—å–º–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
- process_registration_success_email: –ü–∏—Å—å–º–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
- –ò—Å–ø–æ–ª—å–∑—É—é—Ç Jinja2 –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML —à–∞–±–ª–æ–Ω–æ–≤
- –õ–æ–≥–∏—Ä—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
- –í–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏ –∏ –ª–æ–≥–∏—Ä—É—é—Ç –∏—Ö

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- BaseEmailDataManager: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
- Jinja2: –î–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML —à–∞–±–ª–æ–Ω–æ–≤
- FastStream Logger: –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import logging

from faststream.rabbit.fastapi import Logger

from app.core.integrations.mail.base import BaseEmailDataManager
from app.schemas import (EmailMessageSchema, PasswordResetEmailSchema,
                         RegistrationSuccessEmailSchema,
                         VerificationEmailSchema)

from .broker import rabbit_router

logger = logging.getLogger("app.email.tasks")
logger.info("‚ú® –ú–æ–¥—É–ª—å consumers.py –∑–∞–≥—Ä—É–∂–µ–Ω")
email_manager = BaseEmailDataManager()


@rabbit_router.subscriber("email_queue")
async def process_email(message: EmailMessageSchema, logger: Logger):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ email —Å–æ–æ–±—â–µ–Ω–∏—è.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å "email_queue" –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    –æ–±—ã—á–Ω—ã–µ email —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.

    Args:
        message (EmailMessageSchema): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            - to_email: Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            - subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            - body: –ì–æ—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ (HTML –∏–ª–∏ —Ç–µ–∫—Å—Ç)
        logger (Logger): FastStream –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            - status: "success" –∏–ª–∏ "error"
            - to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            - error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)

    Raises:
        Exception: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    """
    logger.info("üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ email –¥–ª—è: %s", message.to_email)

    try:
        await email_manager.send_email(
            to_email=message.to_email, subject=message.subject, body=message.body
        )
        logger.info("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s", message.to_email)
        return {"status": "success", "to_email": message.to_email}
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: %s", str(e))
        return {"status": "error", "error": str(e), "to_email": message.to_email}


@rabbit_router.subscriber("verification_email_queue")
async def process_verification_email(message: VerificationEmailSchema, logger: Logger):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ verification.html
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –∞–¥—Ä–µ—Å–∞.

    Args:
        message (VerificationEmailSchema): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            - to_email: Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            - subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            - verification_token: –¢–æ–∫–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        logger (Logger): FastStream –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
            - status: "success" –∏–ª–∏ "error"
            - to_email: Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            - error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)

    Template variables:
        - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - verification_url: –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Raises:
        Exception: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
    """
    from jinja2 import Environment, FileSystemLoader

    from app.core.settings import settings

    logger.info("üì® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è: %s", message.to_email)

    try:
        template_dir = settings.paths.EMAIL_TEMPLATES_DIR
        env = Environment(loader=FileSystemLoader(str(template_dir)))

        template = env.get_template("verification.html")
        verification_url = f"{settings.VERIFICATION_URL}{message.verification_token}"

        html_content = template.render(
            user_name=message.user_name, verification_url=verification_url
        )

        await email_manager.send_email(
            to_email=message.to_email, subject=message.subject, body=html_content
        )

        logger.info("‚úÖ –ü–∏—Å—å–º–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", message.to_email)
        return {"status": "success", "to_email": message.to_email}
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: %s", str(e))
        return {"status": "error", "error": str(e), "to_email": message.to_email}


@rabbit_router.subscriber("password_reset_email_queue")
async def process_password_reset_email(
    message: PasswordResetEmailSchema, logger: Logger
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ password_reset.html
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.

    Args:
        message (PasswordResetEmailSchema): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            - to_email: Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            - subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            - reset_token: –¢–æ–∫–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞

    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Template variables:
        - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - reset_url: –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    """
    from jinja2 import Environment, FileSystemLoader

    from app.core.settings import settings

    logger.info("üì® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è: %s", message.to_email)

    try:
        template_dir = settings.paths.EMAIL_TEMPLATES_DIR
        env = Environment(loader=FileSystemLoader(str(template_dir)))

        template = env.get_template("password_reset.html")
        reset_url = f"{settings.PASSWORD_RESET_URL}{message.reset_token}"

        html_content = template.render(user_name=message.user_name, reset_url=reset_url)

        await email_manager.send_email(
            to_email=message.to_email, subject=message.subject, body=html_content
        )

        logger.info("‚úÖ –ü–∏—Å—å–º–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", message.to_email)
        return {"status": "success", "to_email": message.to_email}
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: %s", str(e))
        return {"status": "error", "error": str(e), "to_email": message.to_email}


@rabbit_router.subscriber("registration_success_email_queue")
async def process_registration_success_email(
    message: RegistrationSuccessEmailSchema, logger: Logger
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ registration_success.html
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message (RegistrationSuccessEmailSchema): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            - to_email: Email –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            - subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Template variables:
        - user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - login_url: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    """
    from jinja2 import Environment, FileSystemLoader

    from app.core.settings import settings

    logger.info(
        "üì® –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è: %s", message.to_email
    )

    try:
        template_dir = settings.paths.EMAIL_TEMPLATES_DIR
        env = Environment(loader=FileSystemLoader(str(template_dir)))

        template = env.get_template("registration_success.html")
        login_url = settings.LOGIN_URL

        html_content = template.render(user_name=message.user_name, login_url=login_url)

        await email_manager.send_email(
            to_email=message.to_email, subject=message.subject, body=html_content
        )

        logger.info(
            "‚úÖ –ü–∏—Å—å–º–æ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", message.to_email
        )
        return {"status": "success", "to_email": message.to_email}
    except Exception as e:
        logger.error(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", str(e)
        )
        return {"status": "error", "error": str(e), "to_email": message.to_email}
