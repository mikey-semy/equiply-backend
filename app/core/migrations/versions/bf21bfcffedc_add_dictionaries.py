"""add_dictionaries

Revision ID: bf21bfcffedc
Revises: 7dcd16515faa
Create Date: 2025-06-09 22:52:33.280570

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bf21bfcffedc'
down_revision: Union[str, None] = '7dcd16515faa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Создаем enum типы через raw SQL с проверкой существования
    op.execute("""
        DO $$ BEGIN
            CREATE TYPE workpermitstatus AS ENUM ('DRAFT', 'ISSUED', 'EXTENDED', 'COMPLETED', 'CANCELLED');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)

    op.execute("""
        DO $$ BEGIN
            CREATE TYPE workerrole AS ENUM ('RESPONSIBLE_SUPERVISOR', 'PERMIT_ISSUER', 'WORK_PRODUCER', 'OBSERVER', 'BRIGADE_MEMBER');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)

    op.execute("""
        DO $$ BEGIN
            CREATE TYPE electricalsafetygroup AS ENUM ('GROUP_I', 'GROUP_II', 'GROUP_III', 'GROUP_IV', 'GROUP_V');
        EXCEPTION
            WHEN duplicate_object THEN null;
        END $$;
    """)

    # Создаем таблицы
    op.create_table('professions',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_table('subdivisions',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name')
    )
    op.create_table('brigades',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('subdivision', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('work_permits',
    sa.Column('organization', sa.String(), nullable=False),
    sa.Column('subdivision', sa.String(), nullable=False),
    sa.Column('work_description', sa.Text(), nullable=False),
    sa.Column('work_start_date', sa.DateTime(), nullable=False),
    sa.Column('work_end_date', sa.DateTime(), nullable=False),
    sa.Column('special_instructions', sa.Text(), nullable=True),
    sa.Column('permit_issued_date', sa.DateTime(), nullable=False),
    sa.Column('permit_issuer_id', sa.Integer(), nullable=False),
    sa.Column('status', postgresql.ENUM('DRAFT', 'ISSUED', 'EXTENDED', 'COMPLETED', 'CANCELLED', name='workpermitstatus', create_type=False), nullable=False),
    sa.Column('workspace_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['permit_issuer_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workspace_id'], ['workspaces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('brigade_members',
    sa.Column('brigade_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['brigade_id'], ['brigades.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('work_permit_participants',
    sa.Column('work_permit_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', postgresql.ENUM('RESPONSIBLE_SUPERVISOR', 'PERMIT_ISSUER', 'WORK_PRODUCER', 'OBSERVER', 'BRIGADE_MEMBER', name='workerrole', create_type=False), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['work_permit_id'], ['work_permits.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('work_permit_preparation_measures',
    sa.Column('work_permit_id', sa.Integer(), nullable=False),
    sa.Column('electrical_installation', sa.String(), nullable=False),
    sa.Column('disconnection_grounding', sa.String(), nullable=False),
    sa.Column('isolation_fencing', sa.String(), nullable=False),
    sa.Column('order_number', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['work_permit_id'], ['work_permits.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    # Добавляем колонки в users
    op.add_column('users', sa.Column('electrical_safety_group', postgresql.ENUM('GROUP_I', 'GROUP_II', 'GROUP_III', 'GROUP_IV', 'GROUP_V', name='electricalsafetygroup', create_type=False), nullable=True))
    op.add_column('users', sa.Column('profession_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('subdivision_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'users', 'subdivisions', ['subdivision_id'], ['id'])
    op.create_foreign_key(None, 'users', 'professions', ['profession_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_column('users', 'subdivision_id')
    op.drop_column('users', 'profession_id')
    op.drop_column('users', 'electrical_safety_group')
    op.drop_table('work_permit_preparation_measures')
    op.drop_table('work_permit_participants')
    op.drop_table('brigade_members')
    op.drop_table('work_permits')
    op.drop_table('brigades')
    op.drop_table('subdivisions')
    op.drop_table('professions')

    # Удаляем enum типы
    op.execute("DROP TYPE IF EXISTS electricalsafetygroup")
    op.execute("DROP TYPE IF EXISTS workerrole")
    op.execute("DROP TYPE IF EXISTS workpermitstatus")
    # ### end Alembic commands ###
