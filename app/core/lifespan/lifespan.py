"""
–ú–æ–¥—É–ª—å –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
–∫–æ—Ç–æ—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI

from dishka.integrations.fastapi import setup_dishka
from app.core.dependencies.container import container
from app.core.lifespan.state import AppState

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
    - –õ–æ–≥–≥–µ—Ä
    - Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    - RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á

    –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    from app.core.dependencies.rabbitmq import RabbitMQClient
    from app.core.dependencies.redis import RedisClient
    # from app.core.scheduler import scheduler
    from app.core.logging import setup_logging

    AppState.logger = await setup_logging()
    setup_dishka(container=container, app=app)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    # scheduler.start()
    # await AppState.logger.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
    for attempt in range(RabbitMQClient._max_retries):
        try:
            await RedisClient.get_instance()
            await RabbitMQClient.get_instance()

            if await RabbitMQClient.health_check():
                break

        except Exception as e:
            await AppState.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")

        if attempt == RabbitMQClient._max_retries - 1:
            await AppState.logger.warning("‚ö†Ô∏è RabbitMQ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        else:
            await AppState.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}")
            await asyncio.sleep(RabbitMQClient._retry_delay)

    yield

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await RedisClient.close()
    await RabbitMQClient.close()

    # scheduler.shutdown()
    # await AppState.logger.info("üëã –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await app.state.dishka_container.close()

    await AppState.logger.shutdown()
