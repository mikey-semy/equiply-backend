from aiologger.formatters.base import Formatter
from aiologger.formatters.json import JsonFormatter
from datetime import datetime
import json
from app.core.settings import settings

class TimestampMixin:
    """
    –ú–∏–∫—Å–∏–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–≤.

    Methods:
        format_timestamp(record): –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601.
        get_extra_attrs(record): –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏–∑ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞.
    """
    def format_timestamp(self, record):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601.

        Args:
            record (logging.LogRecord): –ó–∞–ø–∏—Å—å –ª–æ–≥–∞.

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601:
                  YYYY-MM-DDTHH:MM:SS.sssZ.
        """
        return datetime.fromtimestamp(record.created).strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]

    def get_extra_attrs(self, record):
        standard_attrs = {
            "name", "msg", "args", "levelname", "levelno", "pathname",
            "filename", "module", "exc_info", "exc_text", "stack_info",
            "lineno", "funcName", "created", "msecs", "relativeCreated",
            "thread", "threadName", "processName", "process", "message",
            "asctime"
        }
        return {k: v for k, v in vars(record).items() if k not in standard_attrs}

class PrettyFormatter(Formatter, TimestampMixin):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ANSI-—Ü–≤–µ—Ç–æ–≤ –∏ —ç–º–æ–¥–∑–∏.

    Attributes:
        COLORS (dict): –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤.
        EMOJIS (dict): –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤.
        RESET (str): –ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ü–≤–µ—Ç–∞.
    """
    COLORS = {
        "DEBUG": "\033[36m",  # Cyan
        "INFO": "\033[32m",   # Green
        "WARNING": "\033[33m", # Yellow
        "ERROR": "\033[31m",   # Red
        "CRITICAL": "\033[41m" # Red background
    }

    EMOJIS = {
        "DEBUG": "üîç",
        "INFO": "‚ú®",
        "WARNING": "‚ö†Ô∏è",
        "ERROR": "‚ùå",
        "CRITICAL": "üí•"
    }

    RESET = "\033[0m"

    def format(self, record):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.

        Args:
            record (logging.LogRecord): –ó–∞–ø–∏—Å—å –ª–æ–≥–∞.

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Pretty:
                  YYYY-MM-DD HH:MM:SS.sssZ - NAME - LEVEL - MESSAGE [extra: {extra_attrs}].
        """
        emoji = self.EMOJIS.get(record.levelname, "")
        color = self.COLORS.get(record.levelname, "")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ record.msg –≤–º–µ—Å—Ç–æ getMessage()
        message = record.msg if record.msg is not None else ""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        formatted_message = f"{emoji}  {message}"

        extra_attrs = self.get_extra_attrs(record)
        extra_msg = f"\033[33m[extra: {extra_attrs}]{self.RESET}" if extra_attrs else ""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        try:
            pretty_format = getattr(settings.logging, "PRETTY_FORMAT", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
            base_msg = pretty_format % {
                "asctime": self.format_timestamp(record),
                "name": record.name,
                "levelname": f"{color}{record.levelname}{self.RESET}",
                "message": formatted_message
            }
        except (AttributeError, TypeError):
            # –ï—Å–ª–∏ settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            base_msg = f"{self.format_timestamp(record)} - {record.name} - {color}{record.levelname}{self.RESET} - {formatted_message}"

        return f"{base_msg} {extra_msg}" if extra_msg else base_msg

class CustomJsonFormatter(JsonFormatter, TimestampMixin):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –≤–∏–¥–µ JSON.

    Methods:
        format(record): –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ –≤–∏–¥–µ JSON.
    """
    def format(self, record):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ –≤–∏–¥–µ JSON.

        Args:
            record (logging.LogRecord): –ó–∞–ø–∏—Å—å –ª–æ–≥–∞.

        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ record.msg –≤–º–µ—Å—Ç–æ getMessage()
        message = record.msg if record.msg is not None else ""
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–≥–∞
        log_data = {
            "timestamp": self.format_timestamp(record),
            "level": record.levelname,
            "name": record.name,
            "module": record.module,
            "function": record.funcName, 
            "message": message
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        extra_attrs = self.get_extra_attrs(record)
        if extra_attrs:
            log_data["extra"] = extra_attrs
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if hasattr(record, "exc_info") and record.exc_info:
            log_data["exception"] = self.formatException(record.exc_info)
            
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ settings.logging.JSON_FORMAT, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        try:
            json_format = getattr(settings.logging, "JSON_FORMAT", {})
            if isinstance(json_format, dict):
                for key, value in json_format.items():
                    if key not in log_data:  # –ù–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
                        if isinstance(value, str):
                            log_data[key] = value % {
                                "levelname": record.levelname,
                                "module": record.module,
                                "funcName": record.funcName,
                                "message": message
                            }
                        else:
                            log_data[key] = value
        except (AttributeError, TypeError):
            # –ï—Å–ª–∏ settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            pass

        return json.dumps(log_data, ensure_ascii=False)