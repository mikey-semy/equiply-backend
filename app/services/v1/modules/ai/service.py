import datetime
from typing import Optional

from fastapi.responses import StreamingResponse
from io import StringIO
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.integrations.cache.ai import AIRedisStorage
from app.core.integrations.http.ai import AIHttpClient
from app.core.settings import settings
from app.models import ModelType
from app.schemas import (AIRequestSchema, AIResponseSchema,
                         CompletionOptionsSchema, MessageRole, MessageSchema,
                         AISettingsSchema)
from app.services.v1.base import BaseService

from .data_manager import AIDataManager


class AIService(BaseService):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º —Å AI

    Attributes:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        http_client: HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI API
    """

    def __init__(
        self,
        session: AsyncSession,
        storage: AIRedisStorage,
    ):
        super().__init__(session)
        self.data_manager = AIDataManager(session)
        self.storage = storage
        self.http_client = AIHttpClient()
        self.max_tokens = settings.YANDEX_MAX_TOKENS

    SYSTEM_MESSAGE = MessageSchema(
        role=MessageRole.SYSTEM.value, text=settings.YANDEX_PRE_INSTRUCTIONS
    )

    async def get_completion(
        self,
        message: str,
        user_id: int,
        model_type: Optional[ModelType] = None,
        role: MessageRole = MessageRole.USER,
    ) -> AIResponseSchema:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            request: –ó–∞–ø—Ä–æ—Å –∫ AI –º–æ–¥–µ–ª–∏

        Returns:
            AIResponseSchema: –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        """
        try:

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user_settings = await self.data_manager.get_user_settings(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            message_history = await self.storage.get_chat_history(user_id)

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_message = MessageSchema(role=role, text=message)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            message_history.append(new_message)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = [self.SYSTEM_MESSAGE] + message_history

            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –µ—ë –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if model_type is None:
                model_type = user_settings.preferred_model

            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º model_uri
            model_uri = self.get_model_uri(model_type)

            request = AIRequestSchema(
                modelUri=model_uri,
                completionOptions=CompletionOptionsSchema(
                    maxTokens=user_settings.max_tokens,
                    temperature=user_settings.temperature,
                ),
                messages=messages,
            )

            response = await self.http_client.get_completion(request)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if response.success:
                assistant_message = MessageSchema(
                    role=MessageRole.ASSISTANT,
                    text=response.result.alternatives[0].message.text,
                )
                message_history.append(assistant_message)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
                await self.storage.save_chat_history(user_id, message_history)

            return response
        except Exception as e:
            self.logger.error("Error in get_completion: %s", str(e))
            await self.storage.clear_chat_history(user_id)
            raise

    def get_model_uri(self, model_type: ModelType) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç URI –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        folder_id = settings.YANDEX_FOLDER_ID.get_secret_value()

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π
        model_mapping = {
            ModelType.YANDEX_GPT_LITE: "yandexgpt-lite",
            ModelType.YANDEX_GPT_PRO: "yandexgpt",
            ModelType.YANDEX_GPT_PRO_32K: "yandexgpt-32k",
            ModelType.LLAMA_8B: "llama-lite",
            ModelType.LLAMA_70B: "llama",
            ModelType.CUSTOM: "custom",  # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è  –ª–æ–≥–∏–∫–∞
        }

        model_name = model_mapping.get(model_type, "llama")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é llama
        model_version = settings.YANDEX_MODEL_VERSION

        return f"gpt://{folder_id}/{model_name}/{model_version}"

    async def get_user_ai_settings(self, user_id: int) -> AISettingsSchema:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            AISettingsSchema: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        settings = await self.data_manager.get_user_settings(user_id)
        return AISettingsSchema.model_validate(settings)

    async def update_user_ai_settings(
        self,
        user_id: int,
        settings_data: dict
    ) -> AISettingsSchema:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

        Returns:
            AISettingsSchema: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await self.data_manager.get_user_settings(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        updated_settings = await self.data_manager.update_items(
            current_settings.id,
            settings_data
        )

        return updated_settings

    async def clear_chat_history(self, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        await self.storage.clear_chat_history(user_id)
        return True

    async def export_chat_history_markdown(self, user_id: int) -> StreamingResponse:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            StreamingResponse: –ü–æ—Ç–æ–∫ —Å —Ñ–∞–π–ª–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            message_history = await self.storage.get_chat_history(user_id)

            # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ markdown
            markdown_buffer = StringIO()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            markdown_buffer.write(f"# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å AI\n\n")
            markdown_buffer.write(f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {current_date}\n\n")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for message in message_history:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if message.role == MessageRole.USER:
                    prefix = "## üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                elif message.role == MessageRole.ASSISTANT:
                    prefix = "## ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                else:
                    prefix = f"## {message.role.capitalize()}"

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                markdown_buffer.write(f"{prefix}\n\n{message.text}\n\n")

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
            markdown_buffer.seek(0)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            filename = f"ai_chat_history_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.md"

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫ —Å —Ñ–∞–π–ª–æ–º
            return StreamingResponse(
                markdown_buffer,
                media_type="text/markdown",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
        except Exception as e:
            self.logger.error("Error exporting chat history to markdown: %s", str(e))
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            error_buffer = StringIO("# –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.")
            error_buffer.seek(0)
            return StreamingResponse(
                error_buffer,
                media_type="text/markdown",
                headers={"Content-Disposition": f"attachment; filename=error_export.md"}
            )

    async def export_chat_history_text(self, user_id: int) -> StreamingResponse:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            StreamingResponse: –ü–æ—Ç–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            message_history = await self.storage.get_chat_history(user_id)

            # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—Å—Ç–∞
            text_buffer = StringIO()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            text_buffer.write(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å AI\n")
            text_buffer.write(f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {current_date}\n\n")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for message in message_history:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if message.role == MessageRole.USER:
                    prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:"
                elif message.role == MessageRole.ASSISTANT:
                    prefix = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
                else:
                    prefix = f"{message.role.capitalize()}:"

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text_buffer.write(f"{prefix}\n{message.text}\n\n")

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
            text_buffer.seek(0)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            filename = f"ai_chat_history_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–æ–∫ —Å —Ñ–∞–π–ª–æ–º
            return StreamingResponse(
                text_buffer,
                media_type="text/plain",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
        except Exception as e:
            self.logger.error("Error exporting chat history to text: %s", str(e))
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            error_buffer = StringIO("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.")
            error_buffer.seek(0)
            return StreamingResponse(
                error_buffer,
                media_type="text/plain",
                headers={"Content-Disposition": f"attachment; filename=error_export.txt"}
            )